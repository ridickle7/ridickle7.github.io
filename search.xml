<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>1. RecyclerView 기초</title>
      <link href="/2018/12/23/RecyclerView/"/>
      <url>/2018/12/23/RecyclerView/</url>
      
        <content type="html"><![CDATA[<h1 id="5-RecyclerView"><a href="#5-RecyclerView" class="headerlink" title="5. RecyclerView"></a>5. RecyclerView</h1><p><strong>A flexible view for providing a limited window into a large data set</strong><br><strong>거대한 데이터 set을 제한된 화면에 보여줄 수 있는 유현한 View</strong></p><p>기본 Document 는 <a href="https://developer.android.com/reference/kotlin/androidx/recyclerview/widget/RecyclerView" target="_blank" rel="noopener">이 링크</a> 참고  </p><h2 id="RecyclerView-이전"><a href="#RecyclerView-이전" class="headerlink" title="RecyclerView 이전"></a>RecyclerView 이전</h2><h3 id="내장-라이브러리"><a href="#내장-라이브러리" class="headerlink" title="내장 라이브러리"></a>내장 라이브러리</h3><ul><li>ListView</li><li>GridView</li></ul><a id="more"></a><p>위의 두 위젯을 활용하여 List 형식으로 데이터 표현!</p><p>한계  </p><ol><li>ViewHolder를 강제하지 않음  </li><li>내장 버그 존재 (ex&gt; GridView position 0 bug)  </li><li>기타 편의성<blockquote><p>example</p><ol><li>아이템 추가/제거 시 적용할 수 있는 애니메이션이 없음</li><li>카드뷰 형태 및 디자인 효과 등</li></ol></blockquote></li></ol><!-- example Code : [https://www.naver.com](https://www.naver.com) --><!-- ![Image](http://cfile30.uf.tistory.com/image/2261D04D56BF3EA7169034) --><h2 id="RecyclerView-소개"><a href="#RecyclerView-소개" class="headerlink" title="RecyclerView 소개"></a>RecyclerView 소개</h2><ul><li>위의 ListView, GridView 를 보완한 위젯</li><li>Android 5.0 Lollipop 과 같이 처음 소개<blockquote><p>RecyclerView 는? </p><ul><li>어노테이션을 통한 가독성 증가 (@GET, @POST)  </li><li>서버 연동을 위한 기능 선택 가능 (HttpClient, OkHttp 등)  </li><li>response 메시지에 대해 파싱방식 설정 가능 (GSON, XML 등)  </li><li>RXJava 지원  </li><li>속도가 타 라이브러리와 기능과 비교하여 제일 빠르다 (아래 사진 참고)  </li></ul></blockquote></li></ul><p>========================== 이렇게 된 이상 Retrofit 으로 간다. ==========================</p><h2 id="Retrofit-가이드라인"><a href="#Retrofit-가이드라인" class="headerlink" title="Retrofit 가이드라인"></a>Retrofit 가이드라인</h2><h3 id="1-app-gradle의-dependency에-두-줄을-추가한다"><a href="#1-app-gradle의-dependency에-두-줄을-추가한다" class="headerlink" title="1. app.gradle의 dependency에 두 줄을 추가한다."></a>1. app.gradle의 dependency에 두 줄을 추가한다.</h3><pre><code>// app.gradledependencies {    compile fileTree(dir: 'libs', include: ['*.jar'])    testCompile 'junit:junit:4.12'    // ...    // retrofit    compile 'com.squareup.retrofit2:retrofit:2.3.0'    compile 'com.squareup.retrofit2:converter-gson:2.3.0'}</code></pre><h3 id="2-매니페스트에-INTERNET-퍼미션-추가"><a href="#2-매니페스트에-INTERNET-퍼미션-추가" class="headerlink" title="2. 매니페스트에 INTERNET 퍼미션 추가"></a>2. 매니페스트에 INTERNET 퍼미션 추가</h3><pre><code>// manifest.xml< uses-permission android:name="android.permission.INTERNET" /></code></pre><h3 id="3-GSON-활용으로-얻어낼-JSON-데이터-클래스를-만듬"><a href="#3-GSON-활용으로-얻어낼-JSON-데이터-클래스를-만듬" class="headerlink" title="3. GSON 활용으로 얻어낼 JSON 데이터 클래스를 만듬"></a>3. GSON 활용으로 얻어낼 JSON 데이터 클래스를 만듬</h3><p>주의 사항<br>해당 데이터 클래스의 형식이, 가져올 JSON 데이터 형식과 매치되어야 한다.<br>즉, <strong>변수(이름)!!!!!!!!</strong> 을 맞춰줘야 한다.</p><pre><code> // User.javapublic class User {    String id;    String passowrd;    public String getId() { return id; }    public String getPassowrd() {        return passowrd;    }    public void setId(String id) {        this.id = id;    }    public void setPassowrd(String passowrd) {        this.passowrd = passowrd;    }}</code></pre><h3 id="4-Service-Interface-객체-생성-및-활성화"><a href="#4-Service-Interface-객체-생성-및-활성화" class="headerlink" title="4. Service Interface 객체 생성 및 활성화"></a>4. Service Interface 객체 생성 및 활성화</h3><pre><code>// NetworkService.javapublic interface NetworkService {    @GET("/users/login")    Call< User> get_userLogin(@Query("id") String id, @Query("password") String password);}</code></pre><h3 id="5-Retrofit과-Service-객체-연결"><a href="#5-Retrofit과-Service-객체-연결" class="headerlink" title="5. Retrofit과 Service 객체 연결"></a>5. Retrofit과 Service 객체 연결</h3><pre><code>// NetworkPresenter.java// Retrofit 객체 생성retrofit = new Retrofit.Builder()    .baseUrl(baseURL)    .client(getRequestHeader())    .addConverterFactory(GsonConverterFactory.create()) // GSON Parser 추가    .build();// interface 활성화service = retrofit.create(NetworkInterface.class);  // 인터페이스 연결//...// 로그 출력 기능을 retrofit에 추가하기private static OkHttpClient getRequestHeader() {    HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();    interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);    OkHttpClient client = new OkHttpClient.Builder()        .addInterceptor(interceptor).build();    return client;}</code></pre><h3 id="6-Call-을-통해-서버와-통신"><a href="#6-Call-을-통해-서버와-통신" class="headerlink" title="6. Call 을 통해 서버와 통신"></a>6. Call 을 통해 서버와 통신</h3><pre><code>// MainActivity.javaCall< User> get_userLogin = service.get_userLogin("id", "pw");post_userLogin.enqueue(new Callback< User>() {    @Override    public void onResponse(Call< User> call, Response< User> response) {        //     }    @Override    public void onFailure(Call< User> call, Throwable t) {        //     }});</code></pre>  <h2 id="3-Retrofit-구성"><a href="#3-Retrofit-구성" class="headerlink" title="3. Retrofit 구성"></a>3. Retrofit 구성</h2><h3 id="1-Service-Interface-객체"><a href="#1-Service-Interface-객체" class="headerlink" title="1. Service Interface 객체"></a>1. Service Interface 객체</h3><p>각 URI에 매핑된 Call 객체 저장소<br>어노테이션을 활용하며, 각 매핑된 이벤트는 모두 Call 객체를 통해 만들고 활용하는 것이 가능  </p><pre><code>// NetworkService.javapublic interface NetworkService {    @GET("/users/login")    public Call< User> get_userLogin(@Query("id") String id, @Query("password") String password);}</code></pre><h3 id="2-Retrofit-객체"><a href="#2-Retrofit-객체" class="headerlink" title="2. Retrofit 객체"></a>2. Retrofit 객체</h3><p>retrofit 객체를 통해 앞서 만든 Call 객체 저장소를 활성화<br>(이를 진행 안할 시 Interface 객체는 그냥 저장소가 될 뿐…)</p><pre><code>// NetworkPresenter.javaRetrofit retrofit = new Retrofit.Builder()    .baseUrl("https://api.github.com")    .build();NetworkService service = retrofit.create(NetworkService.class);</code></pre><p>Retrofit 객체 설정 시 header 및 클라이언트 설정, parser 설정이 가능합니다.  </p><pre><code>// NetworkPresenter.javaretrofit = new Retrofit.Builder()    .baseUrl(baseURL)    .client(getRequestHeader())    .addConverterFactory(GsonConverterFactory.create()) // GSON Parser 추가    .build();service = retrofit.create(NetworkInterface.class);  // 인터페이스 연결</code></pre>  > #### GSON  >   JSON 파싱을 쉽고 간단하게 할 수 있도록 도와주는 외부 라이브러리  > ###### 기존 JSON은>   1. JSONException 에 대해 일일히 try/catch 문을 적용시켜주어야 한다.>   2. 중간 DAO 객체 내에 값을 넣어주는 과정을 거쳐야 한다.  > > ##### 하지만!! GSON을 아래와 같이 활용함으로써!! (아래 작업으로 GSON 라이브러리가 바로 적용 됨)> <pre><code>// Retrofit 객체 Code 에서 발췌> > // ....> .addConverterFactory(GsonConverterFactory.create()) //Json Parser 추가> // ....</code></pre>>  > ##### 아래의 과정을 없애줄 수 있다.> <pre><code>// Call 객체 Code 에서 발췌> > // response json 파싱하는 가정 필요> // ...> </code></pre><h3 id="3-Call-객체"><a href="#3-Call-객체" class="headerlink" title="3. Call 객체"></a>3. Call 객체</h3><p>각각의 Call 객체는 Service Interface 객체를 통해 HTTP 요청을 원격 웹서버로 보낼 수 있습니다.</p><pre><code>// MainActivity.javaCall< User> get_userLogin = service.get_userLogin("id", "pw");post_userLogin.enqueue(new Callback< User>() {    @Override    public void onResponse(Call< User> call, Response< User> response) {        // GSON을 활용하지 않는 경우 response json 파싱하는 과정 필요        Log.d("Login getId : ", response.body().getId());        Toast.makeText(getApplicationContext(), "비밀번호는 " + response.body().getPassowrd(), Toast.LENGTH_SHORT).show();    }    @Override    public void onFailure(Call< User> call, Throwable t) {        Toast.makeText(getApplicationContext(), "실패 : " + t, Toast.LENGTH_SHORT).show();    }});</code></pre><h2 id="4-여담"><a href="#4-여담" class="headerlink" title="4. 여담"></a>4. 여담</h2><h3 id="1-URI는-동적으로-치환이-가능하게-작성할-수-있다"><a href="#1-URI는-동적으로-치환이-가능하게-작성할-수-있다" class="headerlink" title="1. URI는 동적으로 치환이 가능하게 작성할 수 있다."></a>1. URI는 동적으로 치환이 가능하게 작성할 수 있다.</h3><pre><code>// example// 영문/숫자로 이루어진 문자열을 '{' 와 '}' 로 감싸 정의합니다.// 매치되는 인수는 '@Path' 로 정의합니다.@GET("/group/{id}/users")Call< List< User>> groupList(@Path("id") int groupId);</code></pre><blockquote><p>파리미터 어노테이션 종류<br>@QueryMap : 쿼리를 맵 형태로 보냄     (ex&gt; @QueryMap Map&lt;String, String&gt; options)<br>@Body : Body 형태로 request를 보냄 (ex&gt; Call&lt; User&gt; createUser(@Body User user); )<br>@Field : FormUrlEncoded 형식으로 보낼 시 설정 </p><pre><code> // example@FormUrlEncoded@POST("/user/edit")Call< User> updateUser(@Field("first_name") String first, @Field("last_name") String last);</code></pre> @Part : MultiPart 방식으로 보낼 시 선택<pre><code> // example@Multipart@PUT("/user/photo")Call< User> updateUser(@Part("photo") RequestBody photo, @Part("description") RequestBody description);</code></pre></blockquote><p>참고</p><ul><li>Retrofit 의 우수성 : <a href="http://iw90.tistory.com/123" target="_blank" rel="noopener">http://iw90.tistory.com/123</a></li><li>OkHttp 와 Retrofit2 : <a href="https://tacademy.sktechx.com/front/community/mentoring/viewMentoring.action?seq=1163" target="_blank" rel="noopener">https://tacademy.sktechx.com/front/community/mentoring/viewMentoring.action?seq=1163</a></li><li>URL / URI : <a href="https://blog.lael.be/post/61" target="_blank" rel="noopener">https://blog.lael.be/post/61</a></li><li>GSON 설명 : <a href="http://newy.tistory.com/entry/post-2" target="_blank" rel="noopener">http://newy.tistory.com/entry/post-2</a></li><li>전체적인 설명 및 가이드라인 : <a href="http://flymogi.tistory.com/entry/Retrofit%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90-v202" target="_blank" rel="noopener">http://flymogi.tistory.com/entry/Retrofit%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90-v202</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018 Kotlin in Action study 11th</title>
      <link href="/2018/12/22/2018-kotlin-in-Action-%EC%8A%A4%ED%84%B0%EB%94%94-11th/"/>
      <url>/2018/12/22/2018-kotlin-in-Action-%EC%8A%A4%ED%84%B0%EB%94%94-11th/</url>
      
        <content type="html"><![CDATA[<h1 id="Part2-코틀린답게-사용하기"><a href="#Part2-코틀린답게-사용하기" class="headerlink" title="Part2 코틀린답게 사용하기"></a>Part2 코틀린답게 사용하기</h1><p>이제 마무리 단계이다.</p><p><br></p><h2 id="11장-DSL-만들기"><a href="#11장-DSL-만들기" class="headerlink" title="11장. DSL 만들기"></a>11장. DSL 만들기</h2><p><br></p><h3 id="API에서-DSL로"><a href="#API에서-DSL로" class="headerlink" title="API에서 DSL로"></a>API에서 DSL로</h3><p>코딩의 목적 : 코드의 가독성 높이기, 유지 보수성 높이기<br>not only <strong>개별 클래스 집중</strong> but also <strong>타 클래스와 상호작용하는 연결지점 (인터페이스)</strong> 확인 필요  </p><a id="more"></a><p><strong>API가 clean 하다.</strong><br> = 사용자가 읽기 좋은 것 (name 과 concept 을 잘 잡는 것)<br> = 의미없는 syntax 를 뺀 최소한의 코드로 code 가 읽기 좋은 것  </p><p><strong>example</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> number = <span class="number">0</span></span><br><span class="line">   <span class="keyword">var</span> string = StringBuilder()</span><br><span class="line">   <span class="meta">@JvmStatic</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">      <span class="comment">// 1. 확장 함수</span></span><br><span class="line">      System.<span class="keyword">out</span>.println(StringUtils.capitalize(<span class="string">"abcd"</span>))</span><br><span class="line">      System.<span class="keyword">out</span>.println(<span class="string">"abcd"</span>.capitalize())</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 중위 호출</span></span><br><span class="line">      System.<span class="keyword">out</span>.println(<span class="number">1.</span>to(<span class="string">"one"</span>))</span><br><span class="line">      System.<span class="keyword">out</span>.println(<span class="number">1</span> to <span class="string">"one"</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. 연산자 오버로딩</span></span><br><span class="line">      number = number + <span class="number">2</span></span><br><span class="line">      number += <span class="number">2</span></span><br><span class="line">            </span><br><span class="line">      <span class="comment">// 4. 람다를 괄호 밖으로 빼냄</span></span><br><span class="line">      <span class="keyword">var</span> runnable1 = Runnable ( &#123; System.<span class="keyword">out</span>.println(<span class="string">"prev"</span>) &#125; )</span><br><span class="line">      <span class="keyword">var</span> runnable2 = Runnable   &#123; System.<span class="keyword">out</span>.println(<span class="string">"next"</span>) &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5. 수신 객체 지정 람다</span></span><br><span class="line">      string.append(<span class="string">"yes"</span>)</span><br><span class="line">      with(string)&#123;</span><br><span class="line">         append(<span class="string">"yes"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="영역-특화-언어라는-개념"><a href="#영역-특화-언어라는-개념" class="headerlink" title="영역 특화 언어라는 개념"></a>영역 특화 언어라는 개념</h4><p>DSL</p><ul><li>영역 특화 언어</li><li><strong>특정 영역</strong>에서 사용하는 어휘, 문법, 의미론을 사용</li><li>예전부터 있던 개념이나, 도메인 특화 모델링의 수요증가로 더 알려짐<br><br></li><li>DSL example : SQL(데이터베이스), 정규식(문자열)</li><li>클래스나 함수 선언의 필요 없이 즉시 활용 가능 (압축적인 문법)</li><li><strong>선언적</strong>인 언어<blockquote><p>원하는 결과를 기술만 하고, 실질적 동작은 엔진에게 맡김<br></p><ul><li>(참고) <strong>명령적</strong>인 언어<br>어떤 연산을 완수하기 위해 각 단계를 순서대로 정확히 기술</li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2018 Kotlin in Action </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018 Kotlin in Action 2nd</title>
      <link href="/2018/12/22/2018-kotlin-in-Action-%EC%8A%A4%ED%84%B0%EB%94%94-2nd/"/>
      <url>/2018/12/22/2018-kotlin-in-Action-%EC%8A%A4%ED%84%B0%EB%94%94-2nd/</url>
      
        <content type="html"><![CDATA[<h1 id="Part1-코틀린-소개"><a href="#Part1-코틀린-소개" class="headerlink" title="Part1 코틀린 소개"></a>Part1 코틀린 소개</h1><p>첫 장에서는 코틀린의 일반적인 특성을 설명한다고 한다.<br><a href="https://kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;ejkGb=KOR&amp;barcode=9788966262137&amp;orderClick=JAj" target="_blank" rel="noopener">커니님께서 작성한 코틀린 책</a>을 읽었으나 내용을 다 잊어버렸는데(…)<br>이번 장을 보고 기억을 찾아야겠다.</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 2018 Kotlin in Action </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018 Kotlin in Action 3rd</title>
      <link href="/2018/12/22/2018-kotlin-in-Action-%EC%8A%A4%ED%84%B0%EB%94%94-3rd/"/>
      <url>/2018/12/22/2018-kotlin-in-Action-%EC%8A%A4%ED%84%B0%EB%94%94-3rd/</url>
      
        <content type="html"><![CDATA[<h1 id="Part1-코틀린-소개"><a href="#Part1-코틀린-소개" class="headerlink" title="Part1 코틀린 소개"></a>Part1 코틀린 소개</h1><h2 id="지난주에-다루었던-내용"><a href="#지난주에-다루었던-내용" class="headerlink" title="지난주에 다루었던 내용"></a>지난주에 다루었던 내용</h2><ol><li>기본 변수 체계</li><li>기본 함수 체계</li><li>문자열 템플릿</li><li>클래스와 프로퍼티</li><li>enum &amp; when</li><li>반복문 (while, for)</li><li>예외 처리</li></ol><a id="more"></a><h2 id="3-1-코틀린에서-컬렉션-만들기"><a href="#3-1-코틀린에서-컬렉션-만들기" class="headerlink" title="3.1 코틀린에서 컬렉션 만들기"></a>3.1 코틀린에서 컬렉션 만들기</h2><h3 id="코틀린에서의-컬렉션"><a href="#코틀린에서의-컬렉션" class="headerlink" title="코틀린에서의 컬렉션"></a><strong>코틀린에서의 컬렉션</strong></h3><ul><li>데이터를 저장하는 기본 자료구조 집합</li><li>프레임워크 (not library) <a href="https://coderanch.com/t/534486/java/collection-API-called-framework" target="_blank" rel="noopener">관련링크</a></li><li>자바 컬렉션과 내용 동일 (코틀린 자체 컬렉션이 없음)</li><li>자바 코드와의 상호작용이 훨씬 쉬움  </li></ul><p><strong>사용 예제</strong></p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> `1<span class="title">_collection</span>` </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">set</span> = hashSetOf(<span class="number">1</span>, <span class="number">7</span>, <span class="number">53</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">val</span> list = arrayListOf(<span class="number">1</span>, <span class="number">7</span>, <span class="number">53</span>)</span><br><span class="line">            <span class="keyword">var</span> map = hashMapOf(<span class="number">1</span> to <span class="string">"one"</span>, <span class="number">7</span> to <span class="string">"seven"</span>, <span class="number">53</span> to <span class="string">"fifty-three"</span>)</span><br><span class="line"></span><br><span class="line">            println(<span class="keyword">set</span>)<span class="comment">// [1, 53, 7]</span></span><br><span class="line">            println(list)   <span class="comment">// [1, 7, 53]</span></span><br><span class="line">            println(map)    <span class="comment">// &#123;1=one, 53=fifty-three, 7=seven&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>코틀린 컬렉션만의 merit</strong>  </p><ul><li>특별한 확장 함수가 존재 (.max 등)</li><li>java8 stream 사용 가능</li></ul><p><strong>사용 예제</strong></p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> `1<span class="title">_collection</span>` </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">            <span class="comment">// (1, 7, 53, 54, 43)</span></span><br><span class="line">            <span class="keyword">val</span> list = arrayListOf(<span class="number">1</span>, <span class="number">7</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">43</span>)</span><br><span class="line">            </span><br><span class="line">            println(list.max())     <span class="comment">// 53</span></span><br><span class="line">            </span><br><span class="line">            println(list.min())     <span class="comment">// 1</span></span><br><span class="line">            </span><br><span class="line">            println(list.lastIndex) <span class="comment">// 2</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 시작 1!! 7!! 53!! 54!! 43 끝!</span></span><br><span class="line">            println(list.joinToString(<span class="string">"!! "</span>,<span class="string">"시작 "</span>, <span class="string">" 끝!"</span>,<span class="number">-1</span>,<span class="string">"..."</span>, <span class="literal">null</span>))</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// true</span></span><br><span class="line">            println(list.stream().anyMatch &#123; i -&gt; i == <span class="number">53</span> &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// [1, 7, 53, 43]</span></span><br><span class="line">            println(list.stream().filter &#123; i -&gt; i % <span class="number">2</span> == <span class="number">1</span> &#125;.toList())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-2-함수를-호출하기-쉽게-만들기"><a href="#3-2-함수를-호출하기-쉽게-만들기" class="headerlink" title="3.2 함수를 호출하기 쉽게 만들기"></a>3.2 함수를 호출하기 쉽게 만들기</h2><h3 id="이름붙인-인자"><a href="#이름붙인-인자" class="headerlink" title="이름붙인 인자"></a>이름붙인 인자</h3><ul><li>Kotlin에서는 이름 붙인 인자를 통해 가독성을 높일 수 있음.<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> `2<span class="title">_function</span>` </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> list = arrayListOf(<span class="number">1</span>, <span class="number">7</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">43</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Java 방식</span></span><br><span class="line">            println(list.joinToString(<span class="comment">/* separator */</span><span class="string">"!! "</span>,<span class="comment">/* prefix */</span><span class="string">"시작 "</span>,<span class="comment">/* postfix */</span><span class="string">" 끝!"</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Kotlin 방식</span></span><br><span class="line">            println(list.joinToString(separator = <span class="string">"!! "</span>,prefix = <span class="string">"시작 "</span>,postfix = <span class="string">" 끝!"</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 위의 내용은 모두 아래와 똑같은 결과</span></span><br><span class="line">            <span class="comment">// 시작 1!! 7!! 53!! 54!! 43 끝!</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="파라미터-default-값"><a href="#파라미터-default-값" class="headerlink" title="파라미터 default 값"></a>파라미터 default 값</h3><ul><li><p>함수 선언부에서 파라미터의 default 값 설정 가능 (초록 글씨 참고)</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> `2<span class="title">_function</span>` </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Iterable<span class="type">&lt;T&gt;</span>.<span class="title">joinToString</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            separator: <span class="type">CharSequence</span> = <span class="string">", "</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            prefix: <span class="type">CharSequence</span> = <span class="string">""</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            postfix: <span class="type">CharSequence</span> = <span class="string">""</span>)</span></span>: String &#123;</span><br><span class="line">                ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>default 값 설정을 통해, 함수 호출 시 모든 인자를 쓸 수도 있고 안 쓸 수도 있음</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> `2<span class="title">_function</span>` </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">            <span class="comment">// 일반식</span></span><br><span class="line">            println(list.joinToString(separator = <span class="string">"!! "</span>,prefix = <span class="string">"시작 "</span>,postfix = <span class="string">" 끝!"</span>))</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// separator가 없어도, 변수 순서가 바뀌어도 에러 발생하지 않음</span></span><br><span class="line">            println(list.joinToString(postfix = <span class="string">" 끝!"</span>, prefix = <span class="string">"시작 "</span>))</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// prefix를 누락해도 에러 발생하지 않음</span></span><br><span class="line">            println(list.joinToString(separator = <span class="string">"!! "</span>,postfix = <span class="string">" 끝!"</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Iterable<span class="type">&lt;T&gt;</span>.<span class="title">joinToString</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            separator: <span class="type">CharSequence</span> = <span class="string">", "</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            prefix: <span class="type">CharSequence</span> = <span class="string">""</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            postfix: <span class="type">CharSequence</span> = <span class="string">""</span>)</span></span>: String &#123;</span><br><span class="line">                ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p>참고  </p><p><strong>@JvmOverloads</strong>  </p><ul><li>Kotlin에서 지원하는 디폴트를 Java에서도 유연하게 쓰기 위해 제공<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultSample</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">       <span class="keyword">val</span> name: String,</span><br><span class="line">       <span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">       <span class="keyword">val</span> birthday: String = <span class="string">"2000-01-01"</span>) &#123;</span><br><span class="line">   init &#123;</span><br><span class="line">       println(<span class="string">"name <span class="variable">$name</span> age <span class="variable">$age</span> birthday <span class="variable">$birthday</span>"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JmvOverloadsSample</span> <span class="meta">@JvmOverloads</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">       <span class="keyword">val</span> name: String,</span><br><span class="line">       <span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">       <span class="keyword">val</span> birthday: String = <span class="string">"2000-01-01"</span>) &#123;</span><br><span class="line"></span><br><span class="line">   init &#123;</span><br><span class="line">       println(<span class="string">"name <span class="variable">$name</span> age <span class="variable">$age</span> birthday <span class="variable">$birthday</span>"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><p><strong>결과</strong><br><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/kotlin%20in%20action/chapter3/jvmOverload.png?raw=true" alt="image"></p></blockquote><h3 id="정적인-유틸리티-클래스-없애기"><a href="#정적인-유틸리티-클래스-없애기" class="headerlink" title="정적인 유틸리티 클래스 없애기"></a>정적인 유틸리티 클래스 없애기</h3><p>  우리는 주로 개발할 때, 다양한 정적 메소드를 모아두는 Util class를 만든다. (ex&gt; PhotoUtil, NetworkUtil)<br>  특별한 상태, 인스턴스를 가지지 않는 class를 주로 만들게 된다.<br>  Kotlin에서는 굳이 클래스를 생성하지 않고, 패키지를 통해 아래와 같은 util class를 만들 수 있다. </p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JVM에서 생성되는 클래스 이름을 바꾸고 싶을 시 사용하며, 반드시 패키지보다 먼저 선언해야 함</span></span><br><span class="line"><span class="meta">@file:JvmName</span>(<span class="string">"StringFunctions"</span>)</span><br><span class="line"><span class="keyword">package</span> strings</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> abcd = <span class="number">3</span></span><br><span class="line"><span class="keyword">val</span> UNIX_LINE_SEPERATOR = <span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">example</span><span class="params">(str: <span class="type">String</span>)</span></span> : <span class="built_in">Char</span> = str.<span class="keyword">get</span>(str.length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> strings.abcd                 <span class="comment">// strings의 특정 변수 import</span></span><br><span class="line"><span class="keyword">import</span> strings.*                    <span class="comment">// strings의 모든 함수, 변수 import</span></span><br><span class="line"><span class="keyword">import</span> strings.abcd <span class="keyword">as</span> 철창살쇠창살    <span class="comment">// as를 통해 나만의 커스텀 이름 활용 가능</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> `2<span class="title">_function</span>` </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">            print(abcd)</span><br><span class="line">            print(철창살쇠창살)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>  코틀린에서 클래스를 생성하지 않는다고 클래스를 안 만들지는 않는다.<br>  위의 파일을 컴파일 시 파일 이름을 기반으로, 컴파일러가 클래스를 생성한다.</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 위의 코드를 디컴파일한 코드</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MostTopFunctionKt</span> </span>&#123;  <span class="comment">// @file:JvmName 설정 시, 해당 내용이 클래스 이름에 반영됨</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> abcd = <span class="number">3</span>;</span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UNIX_LINE_SEPERATOR = <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAbcd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> abcd;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setAbcd</span><span class="params">(<span class="keyword">int</span> var0)</span> </span>&#123;</span><br><span class="line">      abcd = var0;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">getUNIX_LINE_SEPERATOR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> UNIX_LINE_SEPERATOR;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> <span class="title">example</span><span class="params">(@NotNull String str)</span> </span>&#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(str, <span class="string">"str"</span>);</span><br><span class="line">      <span class="keyword">return</span> str.charAt(str.length() - <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-3-메소드를-다른-클래스에-추가"><a href="#3-3-메소드를-다른-클래스에-추가" class="headerlink" title="3.3 메소드를 다른 클래스에 추가"></a>3.3 메소드를 다른 클래스에 추가</h2><h3 id="확장-함수-extension-function"><a href="#확장-함수-extension-function" class="headerlink" title="확장 함수 (extension function)"></a>확장 함수 (extension function)</h3><ul><li>어떤 클래스의 멤버 메소드처럼 호출 할 수 있지만 그 클래스의 밖에서 선언될 수 있는 함수<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> `3<span class="title">_method</span>` </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">            println(<span class="string">"Kotlin"</span>.lastChar())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클래스 밖에 선언하면, 어느 곳에서든지 사용할 수 있다.</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">lastChar</span><span class="params">()</span></span>: <span class="built_in">Char</span> = <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="keyword">this</span>.length - <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="확장함수-특징"><a href="#확장함수-특징" class="headerlink" title="확장함수 특징"></a>확장함수 특징</h4><h5 id="확장-함수는-정적으로-처리된다"><a href="#확장-함수는-정적으로-처리된다" class="headerlink" title="확장 함수는 정적으로 처리된다."></a>확장 함수는 정적으로 처리된다.</h5><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>: <span class="type">C</span></span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> C.<span class="title">foo</span><span class="params">()</span></span> = <span class="string">"c"</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> D.<span class="title">foo</span><span class="params">()</span></span> = <span class="string">"d"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printFoo</span><span class="params">(c: <span class="type">C</span>)</span></span> &#123;    <span class="comment">// C type으로 제한됨</span></span><br><span class="line">    println(c.foo())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        printFoo(D())        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      DemoKt.printFoo((C)(<span class="keyword">new</span> D()));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoKt</span> </span>&#123;</span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">foo</span><span class="params">(@NotNull C $receiver)</span> </span>&#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull($receiver, <span class="string">"$receiver"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"c"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">foo</span><span class="params">(@NotNull D $receiver)</span> </span>&#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull($receiver, <span class="string">"$receiver"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"d"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">printFoo</span><span class="params">(@NotNull C c)</span> </span>&#123;    <span class="comment">// D type이 들어오더라도 C type으로 인식</span></span><br><span class="line">      Intrinsics.checkParameterIsNotNull(c, <span class="string">"c"</span>);</span><br><span class="line">      String var1 = foo(c);</span><br><span class="line">      System.out.println(var1);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>(X) 직접 클래스를 상속, 수정<br><strong>(O) this를 파라미터로 받는 정적 메소드(static final) 형태로 코드가 생성</strong>  </p><blockquote><ul><li>자동 형변환, 상속 관계 등이 반영되지 않는다.</li><li>호출되는 확장 함수는 <strong>표현식의 타입</strong>에 따라 결정된다.</li></ul></blockquote><h5 id="함수-우선순위-멤버-내-선언된-함수-gt-확장-함수"><a href="#함수-우선순위-멤버-내-선언된-함수-gt-확장-함수" class="headerlink" title="함수 우선순위 : 멤버 내 선언된 함수 &gt; 확장 함수"></a>함수 우선순위 : <strong>멤버 내 선언된 함수</strong> &gt; 확장 함수</h5><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 멤버 내 선언된 함수</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span> &#123; println(<span class="string">"hello!"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 확장함수</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Person.<span class="title">hello</span><span class="params">()</span></span> &#123; println(<span class="string">"HELLLLLLOOOOOOOOO!!!!"</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    Person().hello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result</span></span><br><span class="line">hello!</span><br></pre></td></tr></table></figure></blockquote><h5 id="확장함수-역시-scope-범위-를-가진다"><a href="#확장함수-역시-scope-범위-를-가진다" class="headerlink" title="확장함수 역시 scope(범위)를 가진다"></a>확장함수 역시 scope(범위)를 가진다</h5><ul><li>클래스 내 확장함수 선언 : 해당 클래스 내에서만 사용 가능</li><li>클래스 외부에 확장함수 선언 : 모든 범위에서 사용 가능<br><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/kotlin%20in%20action/chapter3/extension_key3.png?raw=true" alt="image"></li><li>scope로 인해 this가 혼동될 경우, this@”target” 을 통해 직관적으로 처리 가능<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ex</span></span><br><span class="line"><span class="keyword">this</span><span class="symbol">@MainActivity</span>   <span class="comment">// 메인액티비티를 가리킴</span></span><br><span class="line"><span class="keyword">this</span><span class="symbol">@Person</span>         <span class="comment">// Person 객체를 가리킴</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></blockquote></li></ul><h5 id="코틀린-표준-라이브러리는-다양한-확장함수를-가지고-있다"><a href="#코틀린-표준-라이브러리는-다양한-확장함수를-가지고-있다" class="headerlink" title="코틀린 표준 라이브러리는 다양한 확장함수를 가지고 있다"></a>코틀린 표준 라이브러리는 다양한 확장함수를 가지고 있다</h5><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> List<span class="type">&lt;T&gt;</span>.<span class="title">last</span><span class="params">()</span></span>: T &#123; <span class="comment">/** 마지막 원소를 반환함 **/</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> Collection<span class="type">&lt;Int&gt;</span>.<span class="title">max</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123; <span class="comment">/** 컬렉션의 최대값을 찾음 **/</span> &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-4-컬렉션-처리"><a href="#3-4-컬렉션-처리" class="headerlink" title="3.4 컬렉션 처리"></a>3.4 컬렉션 처리</h2><h3 id="vararg-키워드"><a href="#vararg-키워드" class="headerlink" title="vararg 키워드"></a>vararg 키워드</h3><ul><li><p>호출 시 인자 개수가 달라지는 함수를 정의할 수 있다.</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Collections.kt</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">listOf</span><span class="params">(<span class="keyword">vararg</span> elements: <span class="type">T</span>)</span></span>: List&lt;T&gt; </span><br><span class="line">    = <span class="keyword">if</span> (elements.size &gt; <span class="number">0</span>) elements.asList() <span class="keyword">else</span> emptyList()</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, “ab”)<span class="comment">// 우리는 인자 개수를 자유롭게 넣을 수 있다.</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>Java에서는 아래와 같이 사용할 수 있다.</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = listOf(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>);</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">listOf</span><span class="params">(T ... elements)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="스프레드-연산자"><a href="#스프레드-연산자" class="headerlink" title="스프레드 연산자"></a>스프레드 연산자</h3><ul><li><p>스프레드 연산자를 통해, 배열의 내용을 펼쳐줄 수 있다.</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 스프레드 연산자 (*) 를 통해 배열의 내용을 펼쳐줄 수 있다.</span></span><br><span class="line"><span class="keyword">val</span> array = arrayOf(<span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"5"</span>, <span class="string">"7"</span>, <span class="string">"11"</span>)</span><br><span class="line"><span class="keyword">val</span> list2 = listOf(<span class="string">"args: "</span>, *array)    </span><br><span class="line"></span><br><span class="line">println(list2)<span class="comment">// [args: , 2, 3, 5, 7, 11]</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Java에서는 아래와 같이 사용할 수 있다.</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] array = &#123;<span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"5"</span>, <span class="string">"7"</span>, <span class="string">"11"</span>&#125;;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(array));</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="중위-infix-함수"><a href="#중위-infix-함수" class="headerlink" title="중위(infix) 함수"></a>중위(infix) 함수</h3><ul><li>중위(infix) 함수 호출 구문을 통해 인자가 하나뿐인 메소드를 간편하게 호출할 수 있다.<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tuples.kt</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;A, B&gt;</span> A.<span class="title">to</span><span class="params">(that: <span class="type">B</span>)</span></span>: Pair&lt;A, B&gt; = Pair(<span class="keyword">this</span>, that)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">val</span> map = mapOf(<span class="string">"abcd"</span> to <span class="string">"one"</span>, <span class="number">2</span> to <span class="string">"two"</span>, <span class="number">3</span> to <span class="string">"three"</span>)</span><br><span class="line">println(map[<span class="string">"abcd"</span>])<span class="comment">// one</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// add example</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">add</span><span class="params">(that: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span> + that</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p><strong>참고</strong></p><p><strong>Pair</strong>  </p><ul><li>두 원소로 이루어진 순서쌍<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> pair = Pair(<span class="string">"efg"</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> pair2 = <span class="string">"efg"</span> to <span class="number">3</span></span><br><span class="line"><span class="keyword">val</span> pair2 = <span class="string">"efg"</span> to <span class="number">3</span></span><br><span class="line"></span><br><span class="line">println(pair == pair2)  <span class="comment">// true</span></span><br><span class="line">println(pair2)          <span class="comment">// (efg, 3)</span></span><br><span class="line">println(pair2.first)    <span class="comment">// efg</span></span><br><span class="line">println(pair2.second)   <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> (a, b) = <span class="string">"efg"</span> to <span class="number">3</span></span><br><span class="line">println(<span class="string">"<span class="variable">$a</span> , <span class="variable">$b</span>"</span>)      <span class="comment">// efg , 3</span></span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h3 id="구조-분해-선언"><a href="#구조-분해-선언" class="headerlink" title="구조 분해 선언"></a>구조 분해 선언</h3><ul><li><p>구조 분해 선언을 사용하면 복합적인 값을 분해해서 여러 변수에 나눠 담을 수 있다.</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 사용 예 1</span></span><br><span class="line"><span class="keyword">val</span> (a, b) = <span class="string">"efg"</span> to <span class="number">3</span></span><br><span class="line">println(<span class="string">"<span class="variable">$a</span> , <span class="variable">$b</span>"</span>)      <span class="comment">// efg , 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용 예 2</span></span><br><span class="line"><span class="keyword">var</span> collection = arrayListOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> ((index, element) <span class="keyword">in</span> collection.withIndex()) &#123;</span><br><span class="line">   println(<span class="string">"index <span class="variable">$index</span>'s value is <span class="variable">$element</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index 0's value is 1</span></span><br><span class="line"><span class="comment">// index 1's value is 2</span></span><br><span class="line"><span class="comment">// index 2's value is 3</span></span><br><span class="line"><span class="comment">// index 3's value is 4</span></span><br></pre></td></tr></table></figure></blockquote><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/kotlin%20in%20action/chapter3/gujobunhae.png?raw=true" alt="image"></p></li></ul><h2 id="3-5-문자열과-정규식"><a href="#3-5-문자열과-정규식" class="headerlink" title="3.5 문자열과 정규식"></a>3.5 문자열과 정규식</h2><h3 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h3><ul><li>Kotlin 문자열 = Java 문자열 (+ 편의성)</li><li>별도 변환할 필요 없음 / wrapper 생성되지 않음<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">greet</span><span class="params">(name: <span class="type">String</span>, a : <span class="type">Int</span>, b : <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">   System.<span class="keyword">out</span>.println(<span class="string">"Hello, <span class="variable">$name</span>"</span>)</span><br><span class="line">   System.<span class="keyword">out</span>.println(<span class="string">"<span class="variable">$a</span> + <span class="variable">$b</span> is <span class="subst">$&#123;a + b&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; greet(<span class="string">"abcd"</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">hello, abcd</span><br><span class="line"><span class="number">1</span> + <span class="number">2</span> <span class="keyword">is</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="정규식"><a href="#정규식" class="headerlink" title="정규식"></a>정규식</h3><ul><li><p>split의 파라미터 (Java)   : 정규식</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line">String[] abcd = <span class="string">"12.345-6.A"</span>.split(<span class="string">"."</span>);   <span class="comment">// [ ]</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>split의 파라미터 (Kotlin) : 정규식 + 구분 기준</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Kotlin</span></span><br><span class="line">println(<span class="string">"12.345-6.A"</span>.split(<span class="string">"."</span>))                <span class="comment">// [12, 345-6, A]</span></span><br><span class="line">println(<span class="string">"12.345-6.A"</span>.split(<span class="string">"\\."</span>.toRegex()))    <span class="comment">// [12, 345-6, A]</span></span><br><span class="line"></span><br><span class="line">println(<span class="string">"12.345-6.A"</span>.split(<span class="string">"."</span>, <span class="string">"-"</span>))           <span class="comment">// [12, 345, 6, A]</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>question</p></li><li><p>Dir, fullName, fileName, ext 구분하기</p><blockquote><p>// example<br>“/Users/yole/kotlin-book/chapter.adoc”</p></blockquote></li><li><p>sol1) String 확장 함수 활용</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parsePath</span><span class="params">(path: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> directory = path.substringBeforeLast(<span class="string">"/"</span>)       <span class="comment">// last 슬래시 이전의 string (path)</span></span><br><span class="line">   <span class="keyword">val</span> fullName = path.substringAfterLast(<span class="string">"/"</span>)         <span class="comment">// last 슬래시 이후의 string (path)</span></span><br><span class="line">   <span class="keyword">val</span> fileName = fullName.substringBeforeLast(<span class="string">"."</span>)    <span class="comment">// last 마침표 이전의 string (fullName)</span></span><br><span class="line">   <span class="keyword">val</span> extension = fullName.substringAfterLast(<span class="string">"."</span>)    <span class="comment">// last 마침표 이후의 string (fullName)</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Dir: /Users/yole/kotlin-book, fullName : chapter.adoc fileName: chapter, ext: adoc</span></span><br><span class="line">   println(<span class="string">"Dir: <span class="variable">$directory</span>, fullName : <span class="variable">$fullName</span> fileName: <span class="variable">$fileName</span>, ext: <span class="variable">$extension</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>sol2) 정규식 사용</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parsePath</span><span class="params">(path: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">   <span class="comment">// 삼중 따옴표 : 역슬래시를 포함한 어떤 문자도 이스케이프 할 필요 없음</span></span><br><span class="line">   <span class="keyword">val</span> regex = <span class="string">"""(.+)/(.+)\.(.+)"""</span>.toRegex()                        </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">val</span> matchResult = regex.matchEntire(path)</span><br><span class="line">   <span class="keyword">if</span> (matchResult != <span class="literal">null</span>) &#123;</span><br><span class="line">       <span class="comment">// ( )내 값이 순차적으로 들어감</span></span><br><span class="line">       <span class="keyword">val</span> (directory, filename, extension) = matchResult.destructured</span><br><span class="line">      </span><br><span class="line">       <span class="comment">// Dir: /Users/yole/kotlin-book, name: chapter, ext: adoc</span></span><br><span class="line">       println(<span class="string">"Dir: <span class="variable">$directory</span>, name: <span class="variable">$filename</span>, ext: <span class="variable">$extension</span>"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p>참고  </p><p><strong>3중 따옴표</strong>  </p><ul><li>모든 문자열이 그대로 들어감 (이스케이프 불가능)<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 일반적인 사용</span></span><br><span class="line"><span class="keyword">val</span> kotlinLogoDefault  = <span class="string">"""| //</span></span><br><span class="line"><span class="string">|//</span></span><br><span class="line"><span class="string">|/ \"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// trimMargin과 병행</span></span><br><span class="line"><span class="keyword">val</span> kotlinLogoTrim= <span class="string">"""| //</span></span><br><span class="line"><span class="string">                    .|//</span></span><br><span class="line"><span class="string">                    .|/ \"""</span></span><br><span class="line"></span><br><span class="line">println(kotlinLogoDefault)</span><br><span class="line">println(kotlinLogoTrim.trimMargin(<span class="string">"."</span>))<span class="comment">// "." 이전의 공백 무시</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 출력 결과 (위의 두 결과가 아래와 동일)</span></span><br><span class="line"><span class="comment">// | //</span></span><br><span class="line"><span class="comment">// |//</span></span><br><span class="line"><span class="comment">// |/ \</span></span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>우리는 코틀린으로 캐릭터 디자인이 가능할지어다!!!<blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class dudumchit &#123;</span><br><span class="line">    companion object &#123;</span><br><span class="line">        @JvmStatic</span><br><span class="line">        fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">            var input =</span><br><span class="line">                    &quot;&quot;&quot;⊂_ヽ</span><br><span class="line">                    .　  ＼＼ Λ＿Λ</span><br><span class="line">                    .　　  ＼(‘ㅅ&apos;)</span><br><span class="line">                    .  　　　 &gt;　⌒ヽ</span><br><span class="line">                    .  　　　/ 　 へ＼</span><br><span class="line">                    .  　　 /　　/　＼＼</span><br><span class="line">                    .  　　 ﾚ　ノ　　 ヽ_つ</span><br><span class="line">                    .  　　/　/</span><br><span class="line">                    .  　 /　/|</span><br><span class="line">                    .  　(　(ヽ</span><br><span class="line">                    .  　|　|、＼</span><br><span class="line">                    .  　| 丿 ＼ ⌒)</span><br><span class="line">                    .  　| |　　) /</span><br><span class="line">                    .  `ノ )　　Lﾉ</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">            System.out.println(input.trimMargin(&quot;.&quot;))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><p>   <img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/kotlin%20in%20action/chapter3/dudumchit.png?raw=true" alt="image"></p></blockquote><h2 id="3-6-로컬함수의-확장"><a href="#3-6-로컬함수의-확장" class="headerlink" title="3.6 로컬함수의 확장"></a>3.6 로컬함수의 확장</h2><h3 id="DRY한-코드"><a href="#DRY한-코드" class="headerlink" title="DRY한 코드"></a>DRY한 코드</h3><ul><li>Don’t Repeat YourSelf (/<em>똑같은 코드를</em>/ 반복하지 말라)</li></ul><p><strong>but..</strong>  </p><ul><li>메소드 추출 리펙토링 (긴 메소드를 작은 메소드로 자잘자잘하게 쪼갬)<ul><li>작은 메소드가 많아지고, 각 메소드간의 관계를 파악하는 게 힘들어짐</li><li>가독성 저하</li></ul></li><li>별도 내부 또는 외부 클래스에 보기 좋게 정리<ul><li>불필요한 준비 코드 증가, <strong>_</strong>Util</li></ul></li></ul><p><strong>kotlin에서는</strong>  </p><ul><li>함수에서 추출한 함수를 원 함수 내부에 중첩시킴 </li><li>함수 내 함수 (로컬 함수)</li></ul><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><ul><li><strong>문제</strong> : 필드 검증의 코드가 중복됨<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> id: <span class="built_in">Int</span>, <span class="keyword">val</span> name: String, <span class="keyword">val</span> address: String)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">saveUser</span><span class="params">(user: <span class="type">User</span>)</span></span> &#123;   </span><br><span class="line">    <span class="comment">// 필드 검증 중복 (1,2)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 필드 검증1</span></span><br><span class="line">    <span class="keyword">if</span> (user.name.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"Can't save user <span class="subst">$&#123;user.id&#125;</span>: empty Name"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 필드 검증2</span></span><br><span class="line">    <span class="keyword">if</span> (user.address.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"Can't save user <span class="subst">$&#123;user.id&#125;</span>: empty Address"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// save user in DB.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================================================================</span></span><br><span class="line"></span><br><span class="line">saveUser(User(<span class="number">1</span>, <span class="string">""</span>, <span class="string">""</span>))</span><br><span class="line"><span class="comment">// Exception in thread "main" java.lang.IllegalArgumentException: Can't save user 1: empty Name</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h4 id="solution1-로컬함수-사용"><a href="#solution1-로컬함수-사용" class="headerlink" title="solution1) 로컬함수 사용"></a>solution1) 로컬함수 사용</h4><ul><li>validate 로컬 함수를 선언하여 필드 검증 코드를 하나로 줄임</li><li><strong>but : </strong> user 인스턴스를 파라미터로 계속 전달해야 함<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> id: <span class="built_in">Int</span>, <span class="keyword">val</span> name: String, <span class="keyword">val</span> address: String)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">saveUser</span><span class="params">(user: <span class="type">User</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 필드 검증 1, 2 가 합쳐짐</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">validate</span><span class="params">(user: <span class="type">User</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        value: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        fileName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(value.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"Can't save user <span class="subst">$&#123;user.id&#125;</span> : empty <span class="subst">$&#123;fileName&#125;</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// user 인스턴스를 계속 전달해야하는 불편함</span></span><br><span class="line">    validate(user, user.name, <span class="string">"Name"</span>)</span><br><span class="line">    validate(user, user.address, <span class="string">"Address"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//save user in DB.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================================================================</span></span><br><span class="line"></span><br><span class="line">saveUser(User(<span class="number">1</span>, <span class="string">""</span>, <span class="string">""</span>))</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.IllegalArgumentException: Can<span class="string">'t save user 1: empty Name</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h4 id="solution2-로컬-함수에서-바깥-함수의-파라미터-접근"><a href="#solution2-로컬-함수에서-바깥-함수의-파라미터-접근" class="headerlink" title="solution2) 로컬 함수에서 바깥 함수의 파라미터 접근"></a>solution2) 로컬 함수에서 바깥 함수의 파라미터 접근</h4><ul><li>saveUser의 파라미터인 user 값을 참조하여, user 인스턴스를 보내지 않음</li><li><strong>but : </strong> saveUser과 validate를 분리하고 싶음<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> id: <span class="built_in">Int</span>, <span class="keyword">val</span> name: String, <span class="keyword">val</span> address: String)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">saveUser</span><span class="params">(user: <span class="type">User</span>)</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">validate</span><span class="params">(value: <span class="type">String</span>, fieldName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"Can't save user <span class="subst">$&#123;user.id&#125;</span> : "</span> + <span class="string">"empty <span class="subst">$&#123;fieldName&#125;</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    validate(user.name, <span class="string">"Name"</span>)</span><br><span class="line">    validate(user.address, <span class="string">"Address"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//save user in DB.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================================================================</span></span><br><span class="line"></span><br><span class="line">saveUser(User(<span class="number">1</span>, <span class="string">""</span>, <span class="string">""</span>))</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.IllegalArgumentException: Can<span class="string">'t save user 1: empty Name</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h4 id="solution3-검증-로직을-확장-함수로-추출"><a href="#solution3-검증-로직을-확장-함수로-추출" class="headerlink" title="solution3) 검증 로직을 확장 함수로 추출"></a>solution3) 검증 로직을 확장 함수로 추출</h4><ul><li>validate 함수를 확장함수로 분리함<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> User.<span class="title">validateBeforeSave</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">validate</span><span class="params">(value: <span class="type">String</span>, fieldName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"Can't save user <span class="subst">$&#123;id&#125;</span> : empty <span class="subst">$&#123;fieldName&#125;</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    validate(name, <span class="string">"Name"</span>)</span><br><span class="line">    validate(address, <span class="string">"Address"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">saveUser</span><span class="params">(user: <span class="type">User</span>)</span></span> &#123;</span><br><span class="line">    user.validateBeforeSave()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//save user in DB.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================================================================</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; saveUser(User(<span class="number">1</span>, <span class="string">""</span>, <span class="string">""</span>))</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.IllegalArgumentException: Can<span class="string">'t save user 1: empty Name</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h4 id="주의"><a href="#주의" class="headerlink" title="주의"></a>주의</h4><ul><li>확장함수 중첩은 지양할 것!</li><li>함수의 깊이가 깊어지면 <strong>가독성이 떨어질 수 있기 때문에</strong> 주의할 것<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">saveUser</span><span class="params">(user: <span class="type">User</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 확장함수를 로컬 함수로 선언</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> User.<span class="title">validateBeforeSave</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">validate</span><span class="params">(value: <span class="type">String</span>, fieldName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(value.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"Can't save user <span class="subst">$&#123;id&#125;</span> : empty <span class="subst">$&#123;fieldName&#125;</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        validate(name, <span class="string">"Name"</span>)</span><br><span class="line">        validate(address, <span class="string">"Address"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    user.validateBeforeSave()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//save user in DB.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================================================================</span></span><br><span class="line"></span><br><span class="line">saveUser(User(<span class="number">1</span>, <span class="string">""</span>, <span class="string">""</span>))</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.IllegalArgumentException: Can<span class="string">'t save user 1: empty Name</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="과제"><a href="#과제" class="headerlink" title="과제"></a>과제</h2><p>김콭릔은 일반 사칙연산 출력기를 만들고 싶다.<br>그런데 이 친구는 사칙연산을 operator로 하기 싫어하는 등 별난 친구이다.<br>그래서 아래와 같은 방식으로 출력기를 만들어보려 한다.  </p><ul><li><p><strong>입력</strong> : 숫자 하나와 사칙연산 기호</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 +</span><br><span class="line">4 -</span><br><span class="line">...</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>출력</strong> : 기본적인 구구단 포맷 출력<br><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/kotlin%20in%20action/chapter3/hw1_output.png?raw=true" alt="image"></p></li><li><p><strong>예외처리</strong> (아래 3개의 ex만 처리하면 되며 아래와 똑같이 출력될 필요 없음)<br>ex&gt; 첫 번째 인자가 정수가 아닌경우<br>  <img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/kotlin%20in%20action/chapter3/hw1_ex1.png?raw=true" alt="image"><br>ex&gt; 두 번째 인자가 사칙연산 기호가 아닌 경우<br>  <img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/kotlin%20in%20action/chapter3/hw1_ex2.png?raw=true" alt="image"><br>ex&gt; 나누는 숫자가 0인 경우</p><ul><li>0이 나오도록 처리</li></ul></li><li><p><strong>must use</strong></p><ul><li>중위함수(infix) + 확장함수</li><li>when 문</li><li>예외처리 (try catch / throws 등)</li></ul></li><li><p><strong>optional</strong></p><ul><li>validate 처리</li></ul></li><li><p><strong>참고</strong>        </p><ul><li><strong>is문 (ex&gt; a is Int)</strong><br>변수 a가 Int인지 확인 (Boolean 데이터 return)</li><li><strong>Throws</strong><br>kotlin에서는 아래와 같이 throws 처리 (나머지는 Java와 같음)<br><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/kotlin%20in%20action/chapter3/hw1_throw.png?raw=true" alt="image"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2018 Kotlin in Action </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018 Kotlin in Action study 10th</title>
      <link href="/2018/12/10/2018-kotlin-in-Action-%EC%8A%A4%ED%84%B0%EB%94%94-10th/"/>
      <url>/2018/12/10/2018-kotlin-in-Action-%EC%8A%A4%ED%84%B0%EB%94%94-10th/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 2018 Kotlin in Action </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018 Kotlin in Action study 6th</title>
      <link href="/2018/11/11/2018-Kotlin-in-Action-study-6th/"/>
      <url>/2018/11/11/2018-Kotlin-in-Action-study-6th/</url>
      
        <content type="html"><![CDATA[<h1 id="Part1-코틀린-소개"><a href="#Part1-코틀린-소개" class="headerlink" title="Part1 코틀린 소개"></a>Part1 코틀린 소개</h1><h2 id="6장-코틀린-타입-시스템"><a href="#6장-코틀린-타입-시스템" class="headerlink" title="6장. 코틀린 타입 시스템"></a>6장. 코틀린 타입 시스템</h2><p><strong>코틀린만의 두드러진 특성</strong></p><ul><li>nullable Type</li><li>readonly collection</li></ul><h3 id="Nullability"><a href="#Nullability" class="headerlink" title="Nullability"></a>Nullability</h3><blockquote><p>![image]</p><ul><li>NullpointerException 회피를 돕는 특성</li></ul></blockquote><a id="more"></a><h4 id="Nullable-Type"><a href="#Nullable-Type" class="headerlink" title="Nullable Type"></a>Nullable Type</h4><p>JAVA</p><ul><li><p>Annotation 사용 (@NotNull, @Nullable)</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Argument for @NotNull parameter 's' of ... getString must not be null</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(@NotNull String s)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Optional 사용 (Java 8)</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="keyword">null</span>;</span><br><span class="line">    str = Optional.ofNullable(str).orElse(<span class="string">"A"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(str);    <span class="comment">// A</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>Kotlin</p><ul><li>컴파일 단계에서 Null 위험 오류 발생 + Nullable Type 명시적으로 지원<blockquote><p>![image]</p></blockquote></li><li><p>?.연산자</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> notNull: String = <span class="string">"abcd"</span></span><br><span class="line">   <span class="keyword">var</span> s: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// null</span></span><br><span class="line">   System.<span class="keyword">out</span>.println(s?.toUpperCase()) <span class="comment">// if(s == null)</span></span><br><span class="line">                                        <span class="comment">//      s.toUpperCase()</span></span><br><span class="line">                                        <span class="comment">// else</span></span><br><span class="line">                                        <span class="comment">//      null</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 지극히 NPE 를 회피할 수 있는 호출</span></span><br><span class="line">   System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.company?.address?.country?.name?..........)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>?: 연산자&nbsp;(Elvis)</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 잘보면 ?: 에서 엘비스 프레슬리의 스타일을 볼 수 있다</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> notNull: String = <span class="string">"abcd"</span></span><br><span class="line">   <span class="keyword">var</span> s: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// null</span></span><br><span class="line">   System.<span class="keyword">out</span>.println(s?.toUpperCase()) <span class="comment">// if(s == null)</span></span><br><span class="line">                                        <span class="comment">//      s.toUpperCase()</span></span><br><span class="line">                                        <span class="comment">// else</span></span><br><span class="line">                                        <span class="comment">//      null</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 지극히 NPE 를 회피할 수 있는 호출</span></span><br><span class="line">   System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.company?.address?.country?.name?..........)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>?: 연산자로 Exception, function return 또한 호출 가능</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">elvis2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> address = Address(<span class="string">"Elsestr. 47"</span>, <span class="number">80687</span>, <span class="string">"Munich"</span>, <span class="string">"Germany"</span>)</span><br><span class="line">            <span class="keyword">val</span> jetbrains = Company(<span class="string">"JetBrains"</span>, address)</span><br><span class="line">            <span class="keyword">val</span> person = Person(<span class="string">"Dmitry"</span>, jetbrains)</span><br><span class="line">            printShippingLabel(person)</span><br><span class="line">            printShippingLabel(Person(<span class="string">"Alexey"</span>, <span class="literal">null</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Address</span></span>(<span class="keyword">val</span> streetAddress: String, </span><br><span class="line">                      <span class="keyword">val</span> zipCode: <span class="built_in">Int</span>, </span><br><span class="line">                      <span class="keyword">val</span> city: String, </span><br><span class="line">                      <span class="keyword">val</span> country: String)</span><br><span class="line">        </span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Company</span></span>(<span class="keyword">val</span> name: String, </span><br><span class="line">                      <span class="keyword">val</span> address: Address?)</span><br><span class="line">        </span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> name: String, </span><br><span class="line">                     <span class="keyword">val</span> company: Company?)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">printShippingLabel</span><span class="params">(person: <span class="type">Person</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> address = person.company?.address </span><br><span class="line">                ?: <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"No address"</span>)</span><br><span class="line"></span><br><span class="line">            with(address) &#123;</span><br><span class="line">                println(streetAddress)</span><br><span class="line">                println(<span class="string">"<span class="variable">$zipCode</span> <span class="variable">$city</span>, <span class="variable">$country</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p>![image]</p><ul><li></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 2018 Kotlin in Action </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DevFest 2018</title>
      <link href="/2018/11/11/2018%20DevFest/"/>
      <url>/2018/11/11/2018%20DevFest/</url>
      
        <content type="html"><![CDATA[<h1 id="Part1-Data-Uni-Directional-Architecture-in-Android-B"><a href="#Part1-Data-Uni-Directional-Architecture-in-Android-B" class="headerlink" title="Part1 Data Uni-Directional Architecture in Android (B)"></a>Part1 Data Uni-Directional Architecture in Android (B)</h1><p>시간 : 13:45 ~ 14:25&nbsp;&nbsp;|&nbsp;&nbsp;발표자 : 이승민</p><p>#MVI? #MVVM에이은또다른녀석? #웹프론트패러다임을Android에inject</p><h2 id="사례로-들어보는-현-안드로이드-구조의-문제점"><a href="#사례로-들어보는-현-안드로이드-구조의-문제점" class="headerlink" title="사례로 들어보는 현 안드로이드 구조의 문제점"></a>사례로 들어보는 현 안드로이드 구조의 문제점</h2><blockquote><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/1_1%20request.png?raw=true" alt="image"></p><ul><li>View에 영향을 주는 State의 변화가 여러 곳에서 발생 (새 댓글 | 알림 클릭)</li><li>비동기로 일어나는 State 변화 시점을 예상할 수 없음</li><li>모델에서 결정되는 State 를 뷰에서 넘겨받아 따로 관리하기 때문에 격차가 생김</li></ul></blockquote><div style="font-size:24px; text-align:center;"><span style=""><strong>solution : UDA</strong></span></div>  <h2 id="Data-Uni-Directional-Architecture"><a href="#Data-Uni-Directional-Architecture" class="headerlink" title="Data Uni-Directional Architecture"></a>Data Uni-Directional Architecture</h2><h3 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h3><ol><li><strong>단방향</strong><br>View 에 영향을 주는 State 는 한 방향으로만 수정 </li><li><strong>동기</strong><br>앞의 세션이 끝나지 않으면 뒤 액션을 실행하지 않음</li><li><strong>View와 State 분리</strong><br>View는 State 참조만 진행 (Model 에서 State 수정)</li></ol><h3 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h3><h4 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h4><p>Facebook에서 만든 단방향 Architecture<br><a href="http://bestalign.github.io/2015/10/06/cartoon-guide-to-flux/" target="_blank" rel="noopener">참조 링크</a></p><h5 id="구성-요소"><a href="#구성-요소" class="headerlink" title="구성 요소"></a>구성 요소</h5><ol><li>Action Creator<blockquote><p>액션 생성 담당 (액션 : 애플리케이션 상태 변경, 뷰 업데이트 등을 할 수 있게 만드는 Event)<br>타입(type)과 페이로드(payload)를 포함한 액션을 생성</p></blockquote></li><li>Dispatcher<blockquote><p> 콜백이 등록되어 있는 곳<br> Action Creator으로부터 액션을 받고 타입에 따라 연계된 각각 스토어에 보냄</p></blockquote></li><li>Store<blockquote><p>‘현재 애플리케이션 상태’, ‘상태 변환을 위한 로직’ 을 가지고 있는 저장소<br>스토어의 상태 변경 후 Controller View에 상태값이 바뀌었다는 이벤트를 내보냄</p></blockquote></li><li>Controller View &amp; View<blockquote><p>Controller View : 자신의 아래에 있는 View에게 변경된 상태값을 넘김<br>View : 상태 값을 받아와, 사용자에게 보여줄 화면을 렌더링</p></blockquote></li></ol><h5 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h5><ol><li>View<blockquote><p>사용자로부터 이벤트 받음</p></blockquote></li><li>View -&gt; Action Creator<blockquote><p>받은 이벤트에 맞는 Action 생성 지시</p></blockquote></li><li>Action Creator -&gt; Dispatcher<blockquote><p>Action을 만들어 Dispatcher에게 넘김</p></blockquote></li><li>Dispatcher -&gt; Store<blockquote><p>Action 이 순서에 따라 알맞은 Store 로 보냄</p></blockquote></li><li>Store -&gt; Controller View<blockquote><p>자신을 구독(subscribe)하고 있는 Controller View에게 알림</p></blockquote></li><li>Controller View -&gt; View<blockquote><p>자신의 하위 View에게 새로운 상태에 맞게 렌더링 지시</p></blockquote></li></ol><h5 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h5><ol><li>여러개의 Store</li><li>Store = </li></ol><h5 id="한계"><a href="#한계" class="headerlink" title="한계"></a>한계</h5><ol><li>스토어의 코드는 애플리케이션의 상테를 삭제하지 않고는 리로딩이 불가능함</li><li></li></ol><p>Redux : Flux 에서 발전한 라이브러리</p><blockquote><ol><li>뷰에서 dispatch 직접 호출 </li><li>ActionCreator 에서 Action 생성만 수행</li><li>Store에서 새로운 Store 생성</li><li>Reducer가 비즈니스 로직 실행</li><li></li></ol></blockquote><p>Flux는 Dispatcher가 있다 (PPT 오타)</p><h1 id="Part2-함수형-프로그래밍과-안드로이드-테스팅-B"><a href="#Part2-함수형-프로그래밍과-안드로이드-테스팅-B" class="headerlink" title="Part2 함수형 프로그래밍과 안드로이드 테스팅 (B)"></a>Part2 함수형 프로그래밍과 안드로이드 테스팅 (B)</h1><p>시간 : 14:40 ~ 15:20&nbsp;&nbsp;|&nbsp;&nbsp;박미륵  </p><p>#나도이제테스트할수있다. </p><p>Android Test</p><ul><li>Local Test : Java compiler 위에서 실행 (Unit Test)</li><li>Instrument Text : 기기나 emulator 위에서 실행 (UI Test 등)</li></ul><p>Locat Test</p><ul><li>기반 지식 : JUnit 라이브러리</li></ul><p>테스팅이 힘든 이유</p><ul><li>어떻게 작성하는지 모르겠다.</li><li>예제 코드가 아닌 실제 코드는 작성하기 어렵다.</li></ul><p>Method not mocked</p><ul><li>Local Test에서 사용되는 android jar은 실제 코드를 가지고 있지 않음</li><li>실제 디바이스의 시스템 이미지를 통해 제공</li><li>모든 함수들이 exception을 발생</li><li>그러므로 안드 플랫폼에 의존하는 코드가 있으면 안됨</li></ul><p>그럼 어떻게?</p><ol><li>exception이 발생하지 않게 하거나</li></ol><ul><li>getWindow 함수를 mocking (Mock : 실제 object의 행위를 모방)</li><li>mockito, roboinjectic 라이브러리를 통해 더 쉽게 가능</li></ul><ol start="2"><li>exception이 발생하는 함수를 호출하지 않는다.</li></ol><ul><li>테스트 가능한 코드와 불가능한 코드를 구분</li><li>테스트 코드 작성이 어려운 다른 경우에 적합</li><li><strong>테스트 가능한 로직을 불가능한 로직에서 분리</strong>하는 게 주요 key point</li></ul><p>key point 전략</p><ul><li><ol><li>테스트 불가능한 코드는 View에 작성</li></ol></li><li><ol start="2"><li>View 는 최대한 passive하게 작성 (View를 최대한 간단하게 작성)</li></ol></li></ul><p>함수형 프로그래밍은 테스트에 용이하다</p><ul><li>그러면 Kotlin을 사용하면 테스트가 쉬워질까? (X)</li><li>순수 함수가 테스트하기 용이하다</li></ul><blockquote><p>순수 함수?  </p><ol><li>함수의 output이 input의 영향만을 받음</li><li>input을 변경하거나, 외부 다른 변수의 상태를 변경하지 않음 (No Side Effect)</li><li>함수내부에서 테스트 외부 변수의 사용을 최대한 줄인다.</li><li>함수는 input에 대해 항상 특정한 return 값을 가진다.</li></ol></blockquote><p>함수의 테스트 독립성</p><ul><li>3 <em> 3 </em> 3 이 아닌 3 + 3 + 3 으로 테스트 확인이 가능하다.</li></ul><p>TDD 방식으로 명세 작성이 필요하다면 작성한다.<br>테스트 커버리지에는 크게 의미를 두지 않는다.</p><p>함수형 프로그래밍을 하게 되면 클래스가 내부 변수를 가지고 있으면 안된다. (순수 함수를 벗어나게 된다.)<br>class는 데이터의 구조만을 가지고 있는게 이상적</p><h1 id="Part3-Tensorflow-기반-Hand-Body-Pose-Estimation과-Tensorflow-Lite-기반-모바일-경량화-A"><a href="#Part3-Tensorflow-기반-Hand-Body-Pose-Estimation과-Tensorflow-Lite-기반-모바일-경량화-A" class="headerlink" title="Part3 Tensorflow 기반 Hand/Body Pose Estimation과 Tensorflow Lite 기반 모바일 경량화 (A)"></a>Part3 Tensorflow 기반 Hand/Body Pose Estimation과 Tensorflow Lite 기반 모바일 경량화 (A)</h1><p>시간 : 15:35 ~ 16:15&nbsp;&nbsp;|&nbsp;&nbsp;양동석  </p><p>Pose Estimation 정의</p><ul><li>신체의 부분을 </li></ul><p>Pose Estimation는 그리 녹녹히 쉬운 것이 아니다.</p><ul><li>Local evidence is weak</li><li>part context is strong clue</li></ul><p>Heat Map</p><p>Efficient Network</p><ul><li>얼마나 효율적으로 압축할 수 있는가?</li><li>IoT, 모바일, 웨어러블에는 딥러닝 반영이 어려움</li></ul><p>효율적인 기법을 통한 새로운 네트워크 만들기</p><ul><li>대부분 증명된 네트워크 사용 (VGG, 레그넷 등)</li><li>모듈을 줄이는 게 아니라 커널을 먼저 줄이는 것이 진정한 경량화<br>압축! 양자화</li><li>FP32 -&gt; INT8 or Binary(비추) (비례식 활용)</li><li>버릴 건 버리고 취할 건 취한다.</li><li>인식률의 변화가 거의 변하지 않는다. (오히려 올라갈수도 있다)<br>하드웨어 지원….</li></ul><p>Tensorflow Lite!!</p><ul><li>정식 릴리즈 버전이 아님 -&gt; 레퍼런스 부족</li><li>발전이 굉장히 빠르다.</li><li>다른 lite보다 안정적</li><li>GPU 사용이 어려움</li><li>OpenGL (3D 렌더링 및 정규화에 도움)</li><li>기본 Tensorflow에 비해 지원되는 것이 적음 (친절하지도 않음)</li></ul><h1 id="Part4-Android-DataBinding-for-Modularization-ViewModel-and-Testing-A"><a href="#Part4-Android-DataBinding-for-Modularization-ViewModel-and-Testing-A" class="headerlink" title="Part4 Android DataBinding for Modularization, ViewModel and Testing (A)"></a>Part4 Android DataBinding for Modularization, ViewModel and Testing (A)</h1><p>시간 : 16:35 ~ 17:15&nbsp;&nbsp;|&nbsp;&nbsp;김용준  </p><p>MVP 기반 진행<br>Why Databinding</p><ul><li>Glue Code (재사용이 많음)</li><li>Base에 따라 하위 데이터들이 다 바뀜 (강한 결합)</li></ul><p>어케 동작?</p><blockquote><p>사용하기 위해<br>setContentView -&gt; DatabindingUtil.setContentView<br>(라이브데이터가 있는 경우 setLifecycleData 도 진행)<br>xml -&gt; layout을 상위 레이아웃으로</p></blockquote><p>InverseMethod       ()<br>BindingConversion   (as like BindAdapter)<br>BindingAdapter</p><blockquote><p>value (String[])<br>requireAll (Boolean) - default true</p><ul><li>여러개의 value 설정 가능</li></ul></blockquote><p>Two-way Binding<br>data에 의해 화면의 호출이 바뀜</p><p>InverseBindingAdapter<br>textAttrChanged : text가 바뀔시 실행되는 listener</p><p>DirtyFlag<br>mapping</p><ul><li>flag 0(1) : vm.authCode</li><li>flag 1(2) : vm</li><li>flag 2(4) : initialized</li></ul><p>dirtyFlags에 따라 매핑된 함수를 실행</p><p>흐름별 로직</p><ul><li>setContentView 진행 시 DirtyFlag = 4</li><li>dirtyFlag 4 | 2 -&gt; 6</li><li>….</li></ul><p>한번씩 숫자를 입력할때마다 binding 진행</p><p>UI 모듈화 방법</p><ul><li>item을 위한 xml 작성</li><li>binding 작업 진행</li><li>recyclerviewHolder 관리 cost가 줄 수 있다는 점이 큰 장점</li></ul><p>UI Unit Test<br>(사진)</p><h1 id="Part5-Android-Oreo-amp-Pie-업데이트-하기-A"><a href="#Part5-Android-Oreo-amp-Pie-업데이트-하기-A" class="headerlink" title="Part5 Android Oreo &amp; Pie 업데이트 하기 (A)"></a>Part5 Android Oreo &amp; Pie 업데이트 하기 (A)</h1><p>시간 : 17:30 ~ 18:10&nbsp;&nbsp;|&nbsp;&nbsp;정현지  </p><p>O(2017.8) P(2018.8)</p><h2 id="Oreo-API-26"><a href="#Oreo-API-26" class="headerlink" title="Oreo (API 26)"></a>Oreo (API 26)</h2><ul><li>3.0% -&gt; 14.0%</li><li>모든 API를 타겟으로 하는 앱 변경 사항</li><li>Android 8.0을 타겟으로 하는 앱 변경 사항</li></ul><p>알림 (Notification)</p><ul><li>channel 등장 <blockquote><p>(26 아래) 채널 설정 안할 시 알람 안 옴<br>중요도, 우선순위<br>ex&gt; 중요한 것들은 잠금 화면에서 나타날 수 있고, 다른 알람은 그렇게 안함</p></blockquote></li><li>alwaysOn 단말기<blockquote><p>foreground 작업들이 많음<br>icon 투명처리</p></blockquote></li></ul><p>Picture In Picture(PIP) 모드 (다중 창 모드)</p><ul><li>lifecycle에 신경써야함</li></ul><p>Autosizing TextViews</p><ul><li>autoSizeTextType with xml &amp; Java<blockquote><p>uniform : enabled<br>none : disabled</p></blockquote></li><li>resource를 통해 관리</li></ul><p>WebView API</p><ul><li>Version API | SafeBrowsing API (with 사진) | Terminate API</li></ul><p>권한</p><ul><li>명시적으로 요청한 권한만 요청</li><li>런타임 권한 실행 시 같은 그룸의 퍼미션도 같이 허용을 하도록 변경해야함<blockquote><p>ex&gt; read 요청 시 write 도 같이 자동으로 허용 -&gt; 이제는 따로따로 다 요청해야함</p></blockquote></li></ul><p>background 실행 제한</p><ul><li>oreo 대상 앱만 적용됨</li><li>사용자가 제한 설정 가능</li></ul><p>Job Scheduler updated</p><ul><li>작업에 필요한 조건 및 인자 변경 또는 해당 조건의 동작 등록하여 백그라운드 제어 기능</li><li>사용자가 앱을 사용하지 않는 시점에도 앱이 돌아감</li><li>매니페스트에 적어야 함 </li></ul><p>암시적 브로드캐스트 인텐트 제한</p><ul><li>특정 앱을 대상으로 하지 않는 암시적 브로드캐스트 인텐트</li><li>등록 자체에 제한을 걸음 (Oreo)</li></ul><p>Android background 위치 제한</p><ul><li>사용자의 위치 검색의 빈도를 줄임</li></ul><h2 id="Oreo-8-1-Go-edition"><a href="#Oreo-8-1-Go-edition" class="headerlink" title="Oreo 8.1 (Go edition)"></a>Oreo 8.1 (Go edition)</h2><p>효율적인 알림 (ex&gt; 푸시 알람 50개가 동시에 올 시 진동이 1번만 울림)</p><h2 id="Pie-API-26"><a href="#Pie-API-26" class="headerlink" title="Pie (API 26)"></a>Pie (API 26)</h2><blockquote><p>LG-V40 | 삼성-S10 지원 예정<br>전원 관리</p><ul><li>앱 대기 버킷<br>포그라운드 서비스가 돌아가는 시간, 앱 사용도 등에 따라 우선순위 부여 (4개의 등급)<br>사용성에 따라 재할당<br>포그라운드 서비스 사용 시 Manifest에 permission 등록 필요</li></ul></blockquote><ul><li>배터리 세이버 개선<blockquote><p>앱이 유휴 상태가 되기를 기다리지 않고 적극적으로 앱 대기 모드로 둠</p></blockquote></li></ul><p>백그라운드에서 센서 엑세스 제한</p><ul><li>앱이 마이크나 카메라에 엑세스할 수 없음</li><li>가속도계, 자이로스코프를 사용하는 센서는 이벤트 수신 불가</li></ul><p>통화 로그 / 전화번호 엑세스 제한</p><ul><li>Manifest에서 READ_CALL_LOG 권한 허용해야함</li></ul><p>wifi 엑세스 제한</p><ul><li>wifi ssid 연결정보 등을 제공 받을 수 없음</li><li>필요 시, wifiManager을 통해 데이터를 받아야함</li></ul><p>FLAG_ACTIVITY_NEW_TASK 요구사항 적용</p><ul><li>적용 안할 시, LogCat을 통해 에러를 송출</li></ul><p>화면 회전<br>개인정보 &amp; 권한 변경<br>비 SDK 인터페이스 사용 제한  </p><p>스마트 리플</p><p>디스플레이 컷아웃 지원</p><p>ImageDecoder 지원</p><ul><li>BitmapFactory 지원 중단</li></ul><p>최적화된 Kotlin</p><ul><li>컴파일러 최적화</li></ul>]]></content>
      
      
      <categories>
          
          <category> seminar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TECH CONCERT Android 2018</title>
      <link href="/2018/11/01/draft/"/>
      <url>/2018/11/01/draft/</url>
      
        <content type="html"><![CDATA[<h1 id="Part1-Android-DataBinding-기초에서-고급까지"><a href="#Part1-Android-DataBinding-기초에서-고급까지" class="headerlink" title="Part1 Android DataBinding (기초에서 고급까지)"></a>Part1 Android DataBinding (기초에서 고급까지)</h1><p>시간 : 10:10 ~ 11:10&nbsp;&nbsp;|&nbsp;&nbsp;발표자 : 송유섭 (네이버)</p><p>#데이터바인딩 #BindAdapter #</p><a id="more"></a><h1 id="Part2-MVVM-with-Grab-Architecture"><a href="#Part2-MVVM-with-Grab-Architecture" class="headerlink" title="Part2 MVVM with Grab Architecture"></a>Part2 MVVM with Grab Architecture</h1><p>시간 : 10:10 ~ 11:10&nbsp;&nbsp;|&nbsp;&nbsp;정승욱 (Grab)  </p><p>#Microsoft닷넷 #충격 #오개념 #이규원 #노드 #프레그먼트극혐 #센세</p><p>처음부터 “한국에 잘못된 MVVM 게시글들이 많다.” 라는 이야기와 함께 시작되었다.</p><p>지금 MVVM에 대한 이야기가 많이 나온다. </p><p>어찌 보면 제일 충격적이었던 세션이었다 (아직 오전시간 밖에 안됬지만)<br>내가 처음 Android를 할 때 꿈꾼 개발자의 이상을 이 강연자 분께서는 몸소 실천하고 계셨다<br>직접 라이브러리를 만들어서 개발을 한다.</p><h1 id="Part3-디자인-1도-모르는-개발자-UX디자인-시작하기"><a href="#Part3-디자인-1도-모르는-개발자-UX디자인-시작하기" class="headerlink" title="Part3 디자인 1도 모르는 개발자, UX디자인 시작하기"></a>Part3 디자인 1도 모르는 개발자, UX디자인 시작하기</h1><p>시간 : 13:30 ~ 14:30&nbsp;&nbsp;|&nbsp;&nbsp;최유리 (NTS)</p><p>IOS : 3.2Million<br>Android : 2.9Million  </p><p>버그하나 없는 완벽 앱? 기발한 아이디어? 새로운 것?  =&gt; UX 디자인 참여하기!!<br>사용자에게 중요한 것은, 자신의 삶에 어떤 가치를 주는 가이다!</p><p><img src="" alt="의자그림"></p><p>지금의 디자인은 근본적인 삶의 문제를 다루고 있다.<br>디자인적 사고는 문제를 발견해 해결 방법을 제시하는 것이다.</p><ol><li><p>개발자와 함께하는 UX 디자인<br> LEAN UX Cycle : 효율을 중요시함<br> MVP (Minimum Visible Produce)<br> User Centered Design<br> Continuous Deployment!</p><p> UX Design Positive Results</p><ul><li>Samsung Family Story</li><li></li></ul></li></ol><ol start="2"><li><p>UX 디자인과 친해지기</p><p> Kano 모델<br> 매력적인 기능<br> 1차원적 기능<br> 당위적 기능</p><p> Lean UX Cycle</p><ul><li>경험과 측정을 근거로 현상의 원리를 밝힘</li><li>가설을 세우고, 분석하고, 설계하고, 테스트한 후 실행에 옮김</li></ul></li><li><p>디자인 1도 모르는 개발자, UX 디자인 시작하기<br> 어떻게 만들 것인가? (X) 무엇을 만들 것인가 (O)</p><p> 공동의 비전 목표 설정</p><ul><li><p>프로젝트의 목표?</p></li><li><p>이 프로젝트를 통해 얻고 싶은 것?</p></li><li><p>우리의 주요 고객?<br>주요고객을 생각하고 주요고객에 맞는 편의성을 더하자</p></li><li><p>프로젝트 진행에 걸림돌이 되는 것은?</p></li><li><p>서비스의 성공적인 완성은 무엇으로 판단?<br>KPI를 정하는 것을 추천</p><p>사용자가 어려워하는 것, 사용자가 필요한 것</p><p>개발을 할때 사용자를 고민해야 성공할 수 있다.</p></li></ul></li></ol><h1 id="Part4-Material-Design의-철학과-적용-사례"><a href="#Part4-Material-Design의-철학과-적용-사례" class="headerlink" title="Part4 Material Design의 철학과 적용 사례"></a>Part4 Material Design의 철학과 적용 사례</h1><p>시간 : 14:30 ~ 15:30&nbsp;&nbsp;|&nbsp;&nbsp;양찬석 (구글), 김성혁 (구글))<br>왜 머터리얼 디자인을 만들었을까?<br>&lt;구글 gmail&gt; &lt;모바일&gt; …..</p><p>구글에게 필요했던 것 </p><ul><li>다양한 폼펙터와 서비스를 아우르는 일관된 디자인시스템</li><li>현대적이고 아름다운</li><li>개발자가 이해하기 쉬운 디자인</li></ul><p>이미 익숙한 아날로그 UX를 디지털로 이동<br>아날로그 고유 속성에 중점</p><p>=&gt; 머터리얼 디자인 만듬<br>keyword : #높이 #음영 #객체 간 계층구조, 입체적표면, 의미있는모션, 인쇄물같은</p><p>한계</p><ul><li>부족한 엔지니어링 소스<br>제공되는 라이브러리의 한계<br>디자인과 개발 프로세스 간의 연결이 자연스럽지 않음</li><li>비주얼 표현의 제약<br>앱들간의 차이를 나타내는 데 제약<br>모바일에 치중된 디자인 (특히 안드로이드)</li></ul><p>개선</p><ul><li>create</li><li>unify</li><li>customize</li></ul><p>keyword</p><ul><li>유연한기반, 크로스플랫폼</li></ul><p>머터리얼 시스템<br>머터리얼 파운데이션</p><ul><li>머터리얼 디자인의 기반</li><li>좋은 디자인이란?</li><li><p>유연함</p></li><li><p>기존 : 3개 중에서 무조건 하나만 오케이</p></li><li><p>현재 : 다른 방식으로 풀어낼 수 있고 사용자가 이해할 수 있다면 가능</p></li><li><p>실제 사례 ex&gt; Basil (프로토타이핑 앱)</p></li></ul><p>머터리얼 가이드라인</p><ul><li>기존 : 빡빡한 가이드라인</li><li>현재 : 유연한 가능성</li></ul><p>material theming</p><ul><li>더큰 우산</li><li>커스텀을 유연하게 할 수 있도록 자유도 부여</li><li>독창적인 브랜딩 및 아이덴티티 권장</li></ul><p>특징</p><ul><li>머터리얼 컬러 시스템 (컬러테마 추천 및 제공)</li><li>타이포그래피 / Iconography</li><li>Motion</li></ul><p>Tools</p><ul><li><p>Theme editor<br>디자인 작업이 이루어지는 곳<br>스케치에 플러그인 형태로 사용</p></li><li><p>Gallery<br>서로 커뮤니케이션과 협업을 통해 만들 수 있는 곳<br>as like Zeplin</p></li></ul><p>components</p><ul><li>bottom app bar</li><li>banner</li><li>extended fab</li><li>imageLists</li><li>text fields</li><li>backdrop</li></ul><p>Material Design Components 적용하기<br><a href="https://material.io/" target="_blank" rel="noopener">https://material.io/</a> -&gt; Develop<br>Material Components Android</p><p>MDC for android = Custom View + Custom Style + @</p><ul><li>lib 폴더 안에 여러 클래스들이 있음</li><li>Custom Style </li></ul><h1 id="Part5-Android-Kotlin을-통한-개발-전략"><a href="#Part5-Android-Kotlin을-통한-개발-전략" class="headerlink" title="Part5 Android Kotlin을 통한 개발 전략"></a>Part5 Android Kotlin을 통한 개발 전략</h1><p>시간 : 15:30 ~ 16:30&nbsp;&nbsp;|&nbsp;&nbsp;신동길 (NAVER)  </p><p>기존 코드를 어떻게 전환 및 확장할 것인가?</p><ul><li>헤어날 수 없는 Java<br>  -&gt; Java 스타일의 코틀린 코드<br>  -&gt; 기존 자바 코드에서 호출이나 참조가 쉽…지만은 않다<br>  -&gt; 습관의 무서움  </li></ul><p>코틀린 주요기술의 근원</p><ul><li><p>함수형과 람다</p><blockquote><p>함수형<br>함수의 파라미터와 리턴형으로 함수를 표현한 자료형<br>모든 함수는 함수형으로 표현 가능하다<br>함수, 람다, 익명함수, 함수 참조 등을 변수로 선언 &amp; 전달 시 사용</p><p>람다식<br>함수를 불필요한 부분을 생략하고 기호화하여 간결화<br>Expression (Not function)<br>코드 중간에서 값 리턴 불가</p></blockquote></li><li><p>프로퍼티와 함수</p></li><li>연산자 재정의 (오퍼레이터 오버로딩)</li><li>Method Extension</li><li>Pipe Filter Model</li></ul><p>자바에서 코틀린으로 변환 과정</p><ul><li>멤버 변수의 초기화</li><li>@Nullable 처리</li><li>중첩 클래스 쪼개기</li><li>Optional (?.) 최적화</li></ul><p>코드 효율화를 통한 툴킷 정의와 활용</p><ul><li><p>전역 변수와 프로퍼티<br>클래스와 관계없이 변수 상수 정의 가능</p></li><li><p>연산자 재정의</p></li><li><p>고차함수 활용 (DSL 스타일)</p></li><li><p>Global Context<br>  context, Handler, Thread, Resource</p></li></ul><p>가버넌스의 필요성</p><ul><li><p>맺음말 &amp; QnA<br>kotlin 의 기본 내장 함수인 let, apply, with, run 등은 어떤면에서 비슷하게 사용할 수 있어 보이는데요. 이는 여러사람들이 습관따라 다르게 사용할 수 있어보이는데 규칙같은걸 정해두고 사용하시나요? 이를테면 객체생성 후 기본 세팅은 apply 로만 합시다 등으로요.<br>-&gt; let get하고 apply 위주로 많이 사용<br>-&gt; use는 stream에서만 사용</p></li></ul><p>kotlin 은 꼭 클래스를 만들지 않아도 함수나 확장함수 등을 만들 수 있는데, 이를 모아두는 규칙같은게 존재할까요??? 또 이러한 점 때문에 어떻게 보면 StringUtil::isEmpty 대신 isEmpty 로 단순한게 호출할 수는 있어 보이지만 해당 클래스의 메소드인지 확장함수의 메소드인지는 헷갈리수도 있을 것 같은데 (IDE 는 괜찮지만 온라인 코드리뷰에서는 구분이…) 이 점에 대해 어떻게 생각하시는지 궁금합니다.<br>-&gt; 인터페이스 활용 (컴페니언 오브젝트, 함수 다 선언 가능) </p><h1 id="Part6-Obfuscation-101-난독화-프로가드-R8-트랜스포머-API"><a href="#Part6-Obfuscation-101-난독화-프로가드-R8-트랜스포머-API" class="headerlink" title="Part6 Obfuscation 101: 난독화, 프로가드, R8, 트랜스포머 API"></a>Part6 Obfuscation 101: 난독화, 프로가드, R8, 트랜스포머 API</h1><p>시간 : 16:30 ~ 17:30&nbsp;&nbsp;|&nbsp;&nbsp;김용욱 (카카오뱅크)  </p><p>안드로이드 특징<br>이식에 좋은 바이트 코드</p><blockquote><p>Java ByteCode<br>스택 기반의 VM 사용 (IO 모두 스택)<br>32비트 스택하나의 요소가 대부분 타입 커버<br>char을 사용하더라도 기본적으로는 메모리상 이점이 없음</p></blockquote><p>Java의 모든 계산은 VM 스택 상에서 이루어짐</p><blockquote><p>달빅<br>레지스터 기반<br>64K 개의 레지스터 (but 주로 앞의 16~256개 사용)<br>32비트 레지스터 하나의 요소가 대부분의 타입 커버<br>char을 사용하더라도 32비트 사용<br>64비트가 필요한 자료형을 사용할 경우 레지스터 2개<br>200개 연산<br>실제 하드웨어 매핑에 이점</p></blockquote><p>desugar : Java 8 지원</p><p>동적 컴파일 / 의존성 기반<br>암호화되지 않은 클래스와 리소스<br>공간 효율적인 데이터 포맷</p><p>인터프리터 vs JIT vs AOT</p><blockquote><ol><li>아무런 정보가 없었을 때 인터프리터로 해석</li><li>일정 횟수 이상 수행된 메서드만 컴파일해 JIT 코드 캐시에 저장</li><li>메서드 수행 시 JIT 코드 캐시에 있다면 인터프리터 대신 캐시 사용</li><li>프로파일링 정보에 기반하여 JIT 코드 캐시 업데이트</li></ol></blockquote><p>JIT : 일부를 조금조금씩 계산<br>AOT : </p><p>LEB-128</p><p>안드로이드 코드를 숨기는 방법</p><p>첫 장에서는 코틀린의 일반적인 특성을 설명한다고 한다.<br><a href="https://kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;ejkGb=KOR&amp;barcode=9788966262137&amp;orderClick=JAj" target="_blank" rel="noopener">커니님께서 작성한 코틀린 책</a>을 읽었으나 내용을 다 잊어버렸는데(…)<br>이번 장을 보고 기억을 되 찾아야겠다.</p>]]></content>
      
      
      <categories>
          
          <category> seminar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/12/hello-world/"/>
      <url>/2018/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>2018 프론트앤드 스터디 1주차</title>
      <link href="/2018/09/15/2018%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%95%A4%EB%93%9C%20%EC%8A%A4%ED%84%B0%EB%94%94%201%EC%A3%BC%EC%B0%A8/"/>
      <url>/2018/09/15/2018%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%95%A4%EB%93%9C%20%EC%8A%A4%ED%84%B0%EB%94%94%201%EC%A3%BC%EC%B0%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>웹을 정말 돌같이 생각했던 내가 프론트앤드 스터디 참여한 주 이유는 이렇다.</p><p><strong>1. 웹송합니다를 벗어나기 위한 노력</strong><br>나는 웹 프론트앤드 지식이 부족하다..<br>회사에서 맡은 주력 업무는 모바일과 백앤드 개발이지만, 회사는 웹 프론트앤드 또한 관리하고 있다.<br>그래서 웹 프론트와 관련하여 피드백을 줄 수 있어야 하기 때문에.. 웹알못 탈피가 필수가 되었다.<br>이게 프론트앤드 스터디에 참여한 첫번째 이유이다.</p><p><strong>2. javascript 복습</strong><br>비교적 간단하다. 최근 서버 개발자로 프로젝트를 진행하면서 javascript 기초의 부족함을 느껴 개념을 다시 다뤄보고 싶었다.<br>프론트앤드 스터디에 참여한 두 번째 이유!</p><p><strong>3. 동반자겸 사수</strong><br>공부는 물론 스스로 하는거지만, 익숙치 않은 분야를 다루는 만큼 방향성을 잡아주고 사수와 같은 동료들이 있으면 좋겠다고 생각했다.<br>마침 관련 스타트업에서 활동하고 있는 아는 형님의 연락이 있었고, 웹 프론트앤드 경험이 많은 친구도 (꼬셔서) 같이 하게 되었다.<br>웹 프론트앤드 경험자(이자 나를 다잡아줄 사수)와 함께하면 시너지가 확실할 것 같았다.</p><p>이런 이유와 마음가짐을 가지고 프론트앤드 스터디에 참여하게 되었다.</p><hr><h1 id="1주차"><a href="#1주차" class="headerlink" title="1주차"></a>1주차</h1><p>일시 : 2018.09.08 (토)<br>장소 : 할리스커피 신논현역점<br>시간 : 10:00 ~ 14:30<br>참석자 : 동현, 상우, 원호  </p><p>진행 내용  </p><ul><li>초기 방향 정하기</li><li>javascript 개념 talk</li></ul><h2 id="1-javascript의-this"><a href="#1-javascript의-this" class="headerlink" title="1. javascript의 this"></a>1. javascript의 this</h2><p>java에서의 this는 클래스로부터 생성되는 독립적인 인스턴스 객체를 의미한다. (그래서 클래스 밖에서는 this사용이 불가능하다.)<br>하지만 javascript는 함수의 현재 실행 문맥이다. 실행문맥 종류만 4가지가 있다.</p><ul><li>함수 실행 : alert(‘Hello World!’)</li><li>메소드 실행 : console.log(‘Hello World!’)</li><li>생성자 실행 : new RegExp(‘\d’)</li><li>간접 실행 : alert.call(undefined, ‘Hello World!’)</li></ul><p>참고로 위 4가지는 각각의 다른 실행 문맥을 가진다. 사례를 통해 확인해보자.</p><p><br></p><h3 id="1-1-‘함수-실행’-에서의-this"><a href="#1-1-‘함수-실행’-에서의-this" class="headerlink" title="1-1. ‘함수 실행’ 에서의 this"></a>1-1. ‘함수 실행’ 에서의 this</h3><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_1_function_execute.png?raw=true" alt="텍스트"> </p><p>A : 전역 객체이다.  </p><p>이는 실행환경에 따라 전역 객체가 다른데<br>나는 node 상에서 실행시켰으므로 ‘global’ 이 this가 된다.<br>(웹 브라우저상에서는 ‘window’ 가 this가 될 것이다.)    </p><p><br></p><h3 id="1-2-‘메소드-실행’-에서의-this"><a href="#1-2-‘메소드-실행’-에서의-this" class="headerlink" title="1-2. ‘메소드 실행’ 에서의 this"></a>1-2. ‘메소드 실행’ 에서의 this</h3><p>먼저 메소드의 의미를 알아야 될 것 같다. 메소드는 객체 내부의 함수 property 를 말한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var myObject = &#123;   </span><br><span class="line">    helloFunction: <span class="function"><span class="title">function</span></span>() &#123;     // helloFunction is a method </span><br><span class="line">        <span class="built_in">return</span> <span class="string">'Hello World!'</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var message = myObject.helloFunction()</span><br></pre></td></tr></table></figure><p>이 위의 코드에서 helloFunction이 <strong>메소드</strong>라 할 수 있다.<br>속성 접근방식을 통해 호출할 수 있다.<br>그러면 메소드 내에서의 this는 무엇일까?</p><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_2_method_execute.png?raw=true" alt="텍스트"> </p><p>A : 해당 메소드를 소유하고 있는 객체이다.</p><p>그래서 this.value를 선언해도, 문제없이 obj 내부의 value를 호출해줄 수 있다. </p><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_2_method_execute_class.png?raw=true" alt="텍스트"> </p><p>class의 경우, class를 통해 만들어진 인스턴스를 this에 바인딩한다.</p><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_2_method_execute_caution.png?raw=true" alt="텍스트"> </p><p>단 메소드를 파라미터 형식으로 사용 시, this는 피호출 함수가 된다.<br>여기서 helper 뒤에 bind(‘any data’) 를 덧붙이면, any data 자체가 this에 바인딩된다.</p><p><br></p><h3 id="1-3-‘생성자-실행’-에서의-this"><a href="#1-3-‘생성자-실행’-에서의-this" class="headerlink" title="1-3. ‘생성자 실행’ 에서의 this"></a>1-3. ‘생성자 실행’ 에서의 this</h3><p>생성자 실행은 앞에 new 라는 키워드가 붙었을 때, 함수 객체로 계산되어 수행된다. 생성자 실행 시 this는 무슨 값을 가리키게 될까? </p><p><img width="100%" src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_3_constructor_execute.png?raw=true"></p><p>A : 새롭게 생성된 객체(인스턴스) 이다.<br>위 캡처를 참고하여 정확한 생성자 내의 로직을 설명하면 아래와 같다.</p><blockquote><ol><li>빈 객체 생성 후, this와 연결(바인딩)</li><li>생성자 내의 로직 실행</li><li>로직이 반영된 인스턴스를 반환</li></ol></blockquote><p><img width="100%" src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_3_constructor_execute_class.png?raw=true"></p><p>이는 ES6의 class 개념에서도 동일하게 활용된다!</p><p><br></p><h3 id="1-4-‘간접-실행’-에서의-this"><a href="#1-4-‘간접-실행’-에서의-this" class="headerlink" title="1-4. ‘간접 실행’ 에서의 this"></a>1-4. ‘간접 실행’ 에서의 this</h3><p>간접실행은 함수가 .call()이나 .apply(), bind() 메소드와 함께 호출될 때 수행된다.<br>지금까지의 방식이 this에 대해 별다른 언급이 없는 암묵적 this 바인딩이라고 한다면 이 방식은 this를 <strong><em>특정 객체에 명시적으로 바인딩</em></strong>하는 방식이라고 볼 수 있다.  </p><p>첫번째 파라미터에 함수 내부의 this에 바인딩될 객체 인스턴스가 들어가고<br>두번째 파라미터에 함수에 전달할 argument 정보가 들어간다</p><div><br><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_4_indirect_execute.png?raw=true" alt="텍스트"><br></div><p>A : 이미 정답은 예정되어 있었지만 언급하면 첫번째 파라미터 (객체) 이다.<br>8, 9번째 줄을 보면 이해가 될 것이다! 첫번째 파라미터에 따라 this가 달라지는 모습을 볼 수 있다.</p><p>참조</p><ol><li><p>javascript this<br><a href="https://github.com/DongHyunKims/javascript-notes/tree/master/notes/this" target="_blank" rel="noopener">https://github.com/DongHyunKims/javascript-notes/tree/master/notes/this</a></p></li><li><p>poiemaWeb<br><a href="https://poiemaweb.com/js-this" target="_blank" rel="noopener">https://poiemaweb.com/js-this</a></p></li><li><p>javascript this 정리<br><a href="https://hyunseob.github.io/2016/03/10/javascript-this/" target="_blank" rel="noopener">https://hyunseob.github.io/2016/03/10/javascript-this/</a></p></li><li><p>자바스크립트에서 사용되는 this에 대한 설명 1<br><a href="http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-1/#tocAnchor-1-11" target="_blank" rel="noopener">http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-1/#tocAnchor-1-11</a></p></li><li><p>자바스크립트에서 사용되는 this에 대한 설명 2<br><a href="http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-2/" target="_blank" rel="noopener">http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-2/</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 2018 프론트앤드 스터디 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1. javascript 이해</title>
      <link href="/2018/09/15/%5B1%5D%20javascript%20%EC%9D%B4%ED%95%B4/"/>
      <url>/2018/09/15/%5B1%5D%20javascript%20%EC%9D%B4%ED%95%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="javascript의-이해"><a href="#javascript의-이해" class="headerlink" title="javascript의 이해"></a>javascript의 이해</h1><h2 id="javascript의-특징"><a href="#javascript의-특징" class="headerlink" title="javascript의 특징"></a>javascript의 특징</h2><ul><li>단일 Thread 기반</li><li>Callback Queue 사용</li></ul><h2 id="javascript의-Engine-Google-V8-Engine"><a href="#javascript의-Engine-Google-V8-Engine" class="headerlink" title="javascript의 Engine (Google V8 Engine)"></a>javascript의 Engine (Google V8 Engine)</h2><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/javascript/1/Google_V8_Engine_architecture.png?raw=true" alt="image"></p><h3 id="Google-V8-Engine-구조"><a href="#Google-V8-Engine-구조" class="headerlink" title="Google V8 Engine 구조"></a>Google V8 Engine 구조</h3><ul><li>Memory Heap : 메모리 할당 진행</li><li>Call Stack : 코드 실행에 따른 (CPU 작업 단위) 호출 스택이 쌓이는 곳<div style="color:#CCCCCC"><span style="">(밑줄친 단어에 대한 상세 설명은 참고에서 확인)</span></div></li></ul><p>위의 Engine을 통해 javascript는 <strong>단일 쓰레드처럼(!!)</strong> 작업을 처리할 수 있다.</p><blockquote><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/javascript/1/eternal_loop.png?raw=true" alt="image"><br>위와 같이… 말이다. 이렇게 짜면 서버는 죽겠…지</p></blockquote><p><strong>하!! 지!! 만!!</strong>  </p><p>위의 ‘V8 Engine’ 만으로는 Node.js 또는 브라우저의 이벤트 동시 처리를 설명할 수 없다.<br>V8 Engine 개념만으로 생각하면 여러개의 작업이 순차적으로 하나씩 처리될 것이기 때문이다.<br>그러면 자연스럽게 동시에 여러 작업은 할 수 없게 된다.  </p><p>위 개념대로라면 <strong>파일 다운로드를 실행하면, 요청을 받기전까지 웹페이지가 먹통이 되어야</strong> 하는데 웹은 절대 그러지 않는다.<br>그럼 이벤트 동시 처리는 어떻게 설명할 수 있을까?<br>정답을 먼저 이야기하면  </p><p><div style="font-size:24px; text-align:center;"><span style=""><strong>Node.js 나 브라우저에는 V8 Engine 만 있는 게 아니다.</strong></span></div><br>브라우저 렌더링 엔진을 예로 들어, 구조를 해부하면 아래와 같다.<br><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/javascript/1/browser_rendering_architecture.png?raw=true" alt="image"></p><ul><li><p><strong>1. Web API (Background)</strong><br> 브라우저에서 제공하는 API (ex&gt; DOM, Ajax, setTimeout) 보유 및 실행</p></li><li><p><strong>2. Callback Queue</strong><br> 이벤트 콜백함수(ex&gt; setTimeout), I/O 작업 이벤트를 순차적으로 쌓아놓는 Queue<br> Web API 에서 순차적으로 작업된 결과를 받아옴<br> Event Loop를 통해 javascript 엔진 (call stack) 전달</p></li><li><p><strong>3. Event Loop</strong><br> Callback Queue 의 작업들을 javascript 엔진(call stack) 으로 보내기 위해 사용하는 장치<br> 동시성(비동기 처리) 지원</p><blockquote><p>ex&gt; Node.js의 <strong>libuv</strong>, 브라우저의 <strong>웹 워커</strong> 등</p></blockquote></li></ul><p>위 3개의 부속 + javascript Engine이 어우러져 비동기처리가 가능해진 것이다.</p><blockquote><div style="font-size:24px;">참고</div>  <p>CPU 작업(Bound)</p><ul><li>CPU 자원을 사용하는 Task</li><li>Javascript V8 Engine에서 처리</li><li>작업 속도가 빠른 편</li><li>I/O Bound를 제외한 대부분의 javascript 코드와 연산들이 이에 해당한다.</li></ul><p>I/O 작업(Bound)</p><ul><li>Disk, Network, Database와 관련된 Task (입 출력 작업)</li><li>Event Queue에 Message 형식으로 쌓임</li><li>Event Loop에서 처리</li><li>작업 속도가 느린 편</li></ul></blockquote><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>V8 Engine이 단일 호출스택을 사용하기 때문에 javascript 내 처리는 단일 쓰레드 방식이라 할 수 있다.</li><li>javascript 기반 환경 (Node.js 등) 에서는 V8 Engine과 상호작용하기 위한 부가장치들이 존재한다.</li></ul><p><strong>그러므로</strong> javascript 기반 환경 자체가 단일 쓰레드 기반이라고 생각하는 건 심히 위태롭다.</p><h2 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h2><ul><li>자바스크립트의 동작원리: 엔진, 런타임, 호출 스택<br><a href="https://joshua1988.github.io/web-development/translation/javascript/how-js-works-inside-engine/" target="_blank" rel="noopener">https://joshua1988.github.io/web-development/translation/javascript/how-js-works-inside-engine/</a></li><li>자바스크립트와 이벤트 루프<br><a href="https://meetup.toast.com/posts/89" target="_blank" rel="noopener">https://meetup.toast.com/posts/89</a></li><li>[자바스크립트] js엔진은 어떻게 동시처리를 하는가? 이벤트루프<br><a href="http://jinbroing.tistory.com/98" target="_blank" rel="noopener">http://jinbroing.tistory.com/98</a></li><li>호출 스택과 이벤트 루프<br><a href="https://www.zerocho.com/category/Javascript/post/597f34bbb428530018e8e6e2" target="_blank" rel="noopener">https://www.zerocho.com/category/Javascript/post/597f34bbb428530018e8e6e2</a></li><li>loupe<br><a href="https://youtu.be/8aGhZQkoFbQ" target="_blank" rel="noopener">https://youtu.be/8aGhZQkoFbQ</a><br><a href="https://bit.ly/1Btu0Iy" target="_blank" rel="noopener">https://bit.ly/1Btu0Iy</a>  </li><li>개인 github / github 내 참조 링크   <ul><li>Node.js의 내부 아키텍쳐 이해 (<a href="http://sjh836.tistory.com/79" target="_blank" rel="noopener">http://sjh836.tistory.com/79</a>)</li><li>Node.js의 이벤트 루프 이해 (<a href="http://la-stranger.blogspot.kr/2014/02/nodejs-nodejs.html" target="_blank" rel="noopener">http://la-stranger.blogspot.kr/2014/02/nodejs-nodejs.html</a>)</li><li>Node.js의 이벤트 처리 과정 (<a href="https://goo.gl/YJX9pM" target="_blank" rel="noopener">https://goo.gl/YJX9pM</a>)</li><li>Blocking과 NonBlocking의 이해 (<a href="http://ozt88.tistory.com/20" target="_blank" rel="noopener">http://ozt88.tistory.com/20</a>)</li><li>Node.js의 비동기적 특성 (<a href="https://qkraudghgh.github.io/node/2016/10/23/node-async.html" target="_blank" rel="noopener">https://qkraudghgh.github.io/node/2016/10/23/node-async.html</a>)</li><li>Javascript 엔진에 대한 이해 (<a href="http://jinbroing.tistory.com/98" target="_blank" rel="noopener">http://jinbroing.tistory.com/98</a>)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018 프론트앤드 스터디 2주차</title>
      <link href="/2018/09/15/2018%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%95%A4%EB%93%9C%20%EC%8A%A4%ED%84%B0%EB%94%94%202%EC%A3%BC%EC%B0%A8/"/>
      <url>/2018/09/15/2018%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%95%A4%EB%93%9C%20%EC%8A%A4%ED%84%B0%EB%94%94%202%EC%A3%BC%EC%B0%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="2주차"><a href="#2주차" class="headerlink" title="2주차"></a>2주차</h1><p>일시 : 2018.09.22 (토)<br>장소 : 할리스커피 신논현역점<br>시간 : 10:00 ~ 12:00<br>참석자 : 동현, 상우, 원호, 승현(new)</p><p>주 진행내용</p><ul><li>자기소개 (승현)</li><li>javascript crawling</li><li>실행 Context / scope</li></ul><p><br><br></p><h2 id="javascript-crawling-크로울링"><a href="#javascript-crawling-크로울링" class="headerlink" title="javascript crawling (크로울링)"></a>javascript crawling (크로울링)</h2><ul><li>웹 스크래핑 (Web Scraping)</li><li>웹 사이트들에서 원하는 정보를 추출하는 것을 의미</li><li>HTML을 분석하여 원하는 정보를 추출함<blockquote><p>사용할 라이브러리  </p><ol><li>request</li><li>cheerio</li><li>iconv -&gt; 인코딩 변환 시 사용</li></ol></blockquote></li></ul><p><br></p><h3 id="1-request"><a href="#1-request" class="headerlink" title="1. request"></a>1. request</h3><ul><li>웹 페이지의 HTML문서를 그대로 가져오기 위해 사용한다  <blockquote><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/1_1%20request.png?raw=true" alt="image"><br>위와 같은 형식으로 HTML 문서 데이터를 가져올 수 있다.</p></blockquote></li></ul><p><br></p><h3 id="2-cheerio"><a href="#2-cheerio" class="headerlink" title="2. cheerio"></a>2. cheerio</h3><ul><li>HTML 문서를 parsing하여 필요한 정보만을 가져올 수 있도록 돕는 모듈이다. html 특정 요소에 대한 정보를 가져올 수 있다.  <blockquote><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/1_2%20cheerio1.png?raw=true" alt="image"><br>before / after 로그를 확인하면 이해가 될 것이다.<br>html을 로드한 후, text 설정, class 설정을 해줄 수 있다.<br><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/1_2%20cheerio2.png?raw=true" alt="image"><br>위와 같이 class 기반으로 text value를 불러올 수 있으며, 수정된 내용에 대해서도 확인이 가능하다.</p></blockquote></li></ul><p><br></p><h3 id="3-iconv"><a href="#3-iconv" class="headerlink" title="3. iconv"></a>3. iconv</h3><p>1번에서 대략 알 수 있었겠지만, 인코딩 타입이 다른 경우 깨짐글자가 발생 한다. iconv는 <strong>문자열의 인코딩을 변환</strong>시켜주는 모듈이다.  </p><blockquote><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/1_3%20iconv1.png?raw=true" alt="image"><br>활용 예제 (1, 2, 3이 짬뽕되어있는 것 같지만, 조용히 넘어간다.)<br><strong>raw 데이터</strong> 와, <strong>인코딩을 수정한 데이터</strong> 를 비교해보면…<br>왜 사용해야 하는지는 설명할 필요 없을 것이라 생각한다.  </p></blockquote><p>네이버 영화 순위 페이지(url)의 인코딩 방식은 MS949이다.<br>iconv는 MS949와 비슷한 CP949를 지원하는데<br>아래 예제 같이 인코딩 방식을 수정할 수 있다.  </p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; // CP949(MS949)의 내용을 utf-8로 변환</span><br><span class="line">&gt; const iconv = new Iconv(<span class="string">'CP949'</span>, <span class="string">'utf-8//translit//ignore'</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>참고로 Iconv 두번째 파라미터는, <strong>인코딩할 수 없는 데이터의 경우에 대한 처리값</strong>도 포함되어 있다. </p><ul><li>translit : 대체 가능한 문자가 있는 경우 해당 문자로 대체함</li><li>ignore : 지원하지 않는 문자의 경우 무시함</li></ul><p>처리를 안해줄 시 EILSEQ 에러가 발생한다.<br><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/1_3%20iconv2.png?raw=true" alt="image"></p></blockquote><p><br><br></p><h2 id="실행-Context-Scope"><a href="#실행-Context-Scope" class="headerlink" title="실행 Context / Scope"></a>실행 Context / Scope</h2><p>먼저 scope를 이야기해야 실행 Context를 이해하기 쉬워진다.</p><p><br></p><h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><p>전역과 지역에 대해서는 아래 코드로 설명이 가능할 것 같다.</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> x = <span class="string">'global'</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">abcd</span></span>()&#123;</span><br><span class="line">    <span class="built_in">let</span> x = <span class="string">'local'</span></span><br><span class="line">   console.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>우리가 프로그래밍에서 배운 그 전역(global), 지역(local) 이 맞다.<br>(참고로 abcd()를 실행하면 (local)이 나온다.)<br>지역(함수) 내에 해당 변수가 없을 시, 전역 scope로 넘어가 해당 값을 찾게 된다.</p><p><br></p><h3 id="Scope-Chain"><a href="#Scope-Chain" class="headerlink" title="Scope Chain"></a>Scope Chain</h3><p>해당 지역내에 변수가 없는 경우, 점점 한 단위씩 scope를 넓혀가며 값을 찾는다.<br>이렇게 <strong>꼬리를 물며 값을 외부로 찾아나가는 것</strong> 을 Scope Chain이라 한다.</p><p>3개의 console 예제로 한번 파악해보자.</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var name = <span class="string">'zero'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">outer</span></span>() &#123;</span><br><span class="line">  console.log(<span class="string">'outer() : '</span>, name);</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">inner</span></span>() &#123;</span><br><span class="line">    var name = <span class="string">'nero'</span>;</span><br><span class="line">    console.log(<span class="string">'inner() : '</span>, name);</span><br><span class="line">  &#125;</span><br><span class="line">  inner();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outer();</span><br><span class="line">console.log(<span class="string">'global : '</span> + name);</span><br></pre></td></tr></table></figure></blockquote><p><br></p><h4 id="1-Global-console"><a href="#1-Global-console" class="headerlink" title="1. Global console"></a>1. Global console</h4><ol><li>전역 scope 에서 name 값을 찾는다. <blockquote><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/2_1%20scopeChainGlobal.png?raw=true" alt="image"></p></blockquote></li></ol><p>바로 찾았다. 그러므로 여기서는 <strong>‘zero’</strong> 값을 찍는다.</p><p><br></p><h4 id="2-Inner-console"><a href="#2-Inner-console" class="headerlink" title="2. Inner console"></a>2. Inner console</h4><ol><li>inner 함수 scope 내에서 name 값을 찾는다. <blockquote><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/2_1%20scopeChainInner.png?raw=true" alt="image"></p></blockquote></li></ol><p>바로 찾았다. 그러므로 여기서는 <strong>‘nero’</strong> 값을 찍는다.  </p><blockquote><p>Q : 만약 name값이 없었다면?<br>A : outer scope -&gt; global scope로 계속 나아가며 값을 찾았을 것이다. </p></blockquote><p>이제 outer가 문제다.</p><p><br></p><h4 id="3-Outer-console"><a href="#3-Outer-console" class="headerlink" title="3. Outer console"></a>3. Outer console</h4><ol><li><p>먼저 outer 함수 scope 내에서 찾는다.</p><blockquote><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/2_1%20scopeChainOuter1.png?raw=true" alt="image"></p></blockquote></li><li><p>outer scope 에 없으므로 한 단계 외부 scope를 탐색한다. (여기서는 전역)  </p><blockquote><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/2_1%20scopeChainOuter2.png?raw=true" alt="image"></p></blockquote></li></ol><p>1번째 줄의 zero라는 값을 찾았으므로 <strong>‘zero’</strong> 값을 리턴한다.<br>여기서 중요한 것은 <strong>1번 과정에서 inner() 함수를 탐색하지 않는다</strong> 는 것이다.<br><strong>외부로 탐색을 진행한다</strong> 는 것을 주의깊게 기억해야한다.</p><p><br></p><h4 id="lexical-Scope"><a href="#lexical-Scope" class="headerlink" title="lexical Scope"></a>lexical Scope</h4><ul><li><p>Scope는 함수를 <del>호출이 아닌</del> <strong>선언할 때</strong> 생긴다는 개념이다.<br>아래 하나의 예제를 더 보자</p><blockquote><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/2_1%20scopeChainLexical.png?raw=true" alt="image"></p></blockquote><p><strong>log와 wrapper의 scope가 독립적으로 존재한다</strong> 는 것을 캐치하면 lexical Scope는 이해했다고 봐도 무방하다.</p><blockquote><p>Q : 만약 호출할 때 scope가 생겼다면?<br>A : wrapper scope내에 log scope가 생기고, scope chain에 의해 <strong>nero</strong>를 출력했을 것이다. </p><p>하지만,<br>log 함수 선언 범위에서 외부 scope를 탐색하기 때문에!<br>전역 범위에 선언된 name 인 zero를 출력하게 된다.</p></blockquote></li></ul><p><br><br></p><h2 id="실행-Context"><a href="#실행-Context" class="headerlink" title="실행 Context"></a>실행 Context</h2><ul><li>javascript가 실행되는 <strong>환경</strong> 및 정보</li><li>javascript 내 <strong>Call Stack</strong> 에서 실행 Context를 관리<br>(Callback Stack에 대한 내용은 <a href="https://google.com" target="_blank" rel="noopener">javascript 원리 이해</a> 참고)</li><li>함수 <strong>호출(!!!!!)</strong> 시마다 컨텍스트가 생긴다.</li></ul><p><strong>생성</strong>  </p><ul><li>맨 처음에는 전역 컨텍스트가 생성된다.</li><li>Context 생성 시, Context 안에 변수객체(arguments, variable), Scope chain, this 가 생긴다.<blockquote><ul><li>함수가 실행될 시  <ol><li>변수객체 (활성화객체)에서 값을 찾는다.  </li><li>(없을 시) Scope chain rule 에 따라 변수를 찾는다.  </li></ol></li></ul></blockquote></li></ul><p><strong>사라짐</strong>  </p><ul><li>함수실행이 끝나면 해당 컨텍스트는 사라짐 (클로저 예외)</li><li>페이지 종료 시, 전역 컨텍스트 또한 사라짐</li></ul><p>위에 여러가지 특징들이 적혀있는데 아래 코드를 통해 순차적으로 보면 이해가 될 것이다.</p><blockquote><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/2_3%20contextExecute.png?raw=true" alt="image"><br>주석에 번호가 적힌대로 코드가 실행된다.</p></blockquote><h3 id="1-전역-컨텍스트-생성"><a href="#1-전역-컨텍스트-생성" class="headerlink" title="1. 전역 컨텍스트 생성"></a>1. 전역 컨텍스트 생성</h3><p><img align="right" src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/2_3%20contextExecute1.jpeg?raw=true"><br>(1) ~ (6) 까지의 과정<br>(2), (4) : wow, say라는 변수 선언 과정<br>(3), (5) : 각 변수에 함수 변수값 대입 과정</p><ul><li>javascript는 함수형 언어!!</li><li>hoisting으로 인해 선언과 동시에 대입 진행</li></ul><p><br><br><br><br><br><br><br><br><br></p><h3 id="2-say-실행"><a href="#2-say-실행" class="headerlink" title="2. say() 실행"></a>2. say() 실행</h3><p><img align="right" src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/2_3%20contextExecute2.jpeg?raw=true"><br>(7) 실행 후 (8) ~ (10) 까지 과정<br>(8) : name 값 선언 및 초기화<br>(9) : console.log(name)을 실행</p><blockquote><ul><li>name은 변수객체(활성화객체)에서 찾은 값을 사용<br>(10) : wow(‘hello’)를 실행  </li><li>wow가 첫번째 유효범위 (‘say’)에서 없으므로<br>다음 유효범위 (‘global’) 에서 찾음</li><li>전역 범위의 wow 값을 활용</li></ul></blockquote><p><br><br><br><br><br><br></p><h3 id="3-way-‘hello’-실행"><a href="#3-way-‘hello’-실행" class="headerlink" title="3. way(‘hello’) 실행"></a>3. way(‘hello’) 실행</h3><p><img align="right" src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/2_3%20contextExecute3.png?raw=true"><br>(10) 실행 후의 과정<br>(11) : console.log(word + ‘ ‘ + name)을 실행</p><blockquote><ul><li>word : 변수객체(활성화객체)내 값을 가져옴</li><li>name은 첫번째 유효범위 (‘wow’)에서 없으므로<br>다음 유효범위 (‘global’) 에서 찾음</li><li>전역범위의 name 값을 활용</li></ul></blockquote><p><br><br><br><br><br><br><br></p><h3 id="4-스택상에서의-표현"><a href="#4-스택상에서의-표현" class="headerlink" title="4. 스택상에서의 표현"></a>4. 스택상에서의 표현</h3><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/2_3%20contextExecuteTotal.jpeg?raw=true" alt="image"></p><div style="text-align:center"><span style="">여기까지가 실행 컨텍스트 이야기이다.</span></div><p><br><br><br></p><h3 id="5-기타"><a href="#5-기타" class="headerlink" title="5. 기타"></a>5. 기타</h3><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/2nd/2_3%20contextExecuteHomework.png?raw=true" alt="image"><br>이것도 도식상으로 설명할 수 있으면, 실행 컨텍스트는 다 이해했다고 보아도 무방할듯 하다.</p><p><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>크로울링</p><ul><li><p>[Node.js] 크롤링 DOM parsing (request, cheerio, iconv 모듈)<br><a href="http://victorydntmd.tistory.com/94" target="_blank" rel="noopener">http://victorydntmd.tistory.com/94</a></p></li><li><p>자바스크립트로 크롤링 하기 1<br><a href="https://github.com/DongHyunKims/javascript-notes/tree/master/notes/daily/crawling" target="_blank" rel="noopener">https://github.com/DongHyunKims/javascript-notes/tree/master/notes/daily/crawling</a>   </p></li></ul><p>실행 Context</p><ul><li><p>zeroCho 함수의 범위 (scope)<br><a href="https://www.zerocho.com/category/Javascript/post/5740531574288ebc5f2ba97e" target="_blank" rel="noopener">https://www.zerocho.com/category/Javascript/post/5740531574288ebc5f2ba97e</a></p></li><li><p>zeroCho 실행 컨텍스트<br><a href="https://www.zerocho.com/category/JavaScript/post/5741d96d094da4986bc950a0" target="_blank" rel="noopener">https://www.zerocho.com/category/JavaScript/post/5741d96d094da4986bc950a0</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2018 프론트앤드 스터디 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018 Kotlin in Action 1st</title>
      <link href="/2018/09/15/2018-kotlin-in-Action-%EC%8A%A4%ED%84%B0%EB%94%94-1st/"/>
      <url>/2018/09/15/2018-kotlin-in-Action-%EC%8A%A4%ED%84%B0%EB%94%94-1st/</url>
      
        <content type="html"><![CDATA[<h1 id="Part1-코틀린-소개"><a href="#Part1-코틀린-소개" class="headerlink" title="Part1 코틀린 소개"></a>Part1 코틀린 소개</h1><p>첫 장에서는 코틀린의 일반적인 특성을 설명한다고 한다.<br><a href="https://kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;ejkGb=KOR&amp;barcode=9788966262137&amp;orderClick=JAj" target="_blank" rel="noopener">커니님께서 작성한 코틀린 책</a>을 읽었으나 내용을 다 잊어버렸는데(…)<br>이번 장을 보고 기억을 찾아야겠다.</p><a id="more"></a><p><br></p><h2 id="1장-코틀린이란-무엇이며-왜-필요한가"><a href="#1장-코틀린이란-무엇이며-왜-필요한가" class="headerlink" title="1장. 코틀린이란 무엇이며 왜 필요한가?"></a>1장. 코틀린이란 무엇이며 왜 필요한가?</h2><ul><li>간결하고 실용적</li><li>자바 코드와의 상호운용성 중시</li><li>성능은 자바와 같은 수준</li></ul><p><br></p><h3 id="1-1-코틀린-맛보기"><a href="#1-1-코틀린-맛보기" class="headerlink" title="1.1. 코틀린 맛보기"></a>1.1. 코틀린 맛보기</h3><ul><li>코틀린 코드 간편 실행 : <a href="https://try.kotlinlang.org/" target="_blank" rel="noopener">https://try.kotlinlang.org/</a><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_1_1_ATasteOfKotlin</span> </span>&#123;             <span class="comment">// 1. quote 기호를 통해 새로운 이름 설정을 할 수 있다.</span></span><br><span class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(                  <span class="comment">// 2. data 클래스</span></span><br><span class="line">            <span class="keyword">val</span> name: String,</span><br><span class="line">            <span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">0</span>,           <span class="comment">// 3. default 값을 넣어줄 수 있다.</span></span><br><span class="line">            <span class="keyword">val</span> phoneNum: <span class="built_in">Int</span>? = <span class="literal">null</span>)  <span class="comment">// 4. nullable 값 설정이 가능하다.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> persons = listOf(</span><br><span class="line">                    Person(<span class="string">"Alice"</span>),</span><br><span class="line">                    Person(<span class="string">"Bob"</span>, age = <span class="number">29</span>),           <span class="comment">// 5. 파라미터를 명시하여 넣어줄 수 있다.</span></span><br><span class="line">                    Person(<span class="string">"ridickle"</span>, phoneNum = <span class="number">10</span>)) <span class="comment">// 6. 파라미터 순서에 종속적이지 않다.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// maxBy : Collection 내장 함수</span></span><br><span class="line">            <span class="keyword">val</span> oldest = persons.maxBy &#123; it.age ?: <span class="number">0</span> &#125; <span class="comment">// 7. 람다 식 &amp; 엘비스 연산자</span></span><br><span class="line">            println(<span class="string">"The oldest person is <span class="variable">$oldest</span>"</span>)    <span class="comment">// 8. 문자열 템플릿</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 결과 : The oldest person is Person(name=Bob, age=29)  // 9. toString 내장</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p><span style="color:#CCCCCC"><del>주관적으로</del></span> 코틀린만의 특성을 위와 같이 찾아볼 수 있다.</p><p><strong>1. quote 기호를 통해 새로운 이름 설정을 할 수 있다.</strong></p><ul><li>위와 같이 앞에 숫자를 넣을 수도 있다.</li><li>하지만 dot(.) 이 안되는 등 일부 exception 이 있다.</li></ul><p><strong>2. data 클래스</strong></p><ul><li>데이터 저장에 특화된 클래스를 생성 가능하다.</li><li>편리한 함수를 제공한다. (equals(), hashCode(), toString(), componentN() 등)</li><li>interface 이외 상속은 불가능하다 (여러가지 잠재적 문제가 있다. 이 <a href="https://blog.jetbrains.com/kotlin/2015/09/feedback-request-limitations-on-data-classes/" target="_blank" rel="noopener">링크</a>에서 자세한 내용 확인 가능)</li></ul><p><strong>3. default 값을 넣어줄 수 있다.</strong></p><ul><li>값이 안 들어갈 경우에 대한 기본값 설정이 가능하다.</li></ul><p><strong>4. nullable 값 설정이 가능하다.</strong></p><ul><li>?를 통해 null 값을 넣어줄 수 있다.</li></ul><p><strong>5. 파라미터를 명시하여 넣어줄 수 있다.</strong></p><ul><li>파라미터를 직접 명시하여 값을 넣어줄 수 있다.</li><li>builder 패턴이 울고 있는 모습이 보인다(?)</li></ul><p><strong>6. 파라미터 순서에 종속적이지 않다.</strong></p><ul><li>5번의 연장선상 내용이다.</li><li>기존이라면 에러가 나거나, age에 값이 들어가 이상한 결과가 나와야한다.<br>하지만 kotlin에는 파라미터 직접 명시 및 데이터 주입으로 유연한 처리가 가능하다.</li></ul><p><strong>7. 람다 식 &amp; 엘비스 연산자</strong></p><ul><li><p>람다 식</p><ul><li>function에 function을 전달하고, 이를 콜 하게 하는 것</li><li>SAM (Single Abstract Method) 에 대해서는 {} 식을 직접 만들수 있다.</li></ul><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppcompatActivity &#123;</span></span></span><br><span class="line">    <span class="comment">// ex (setOnClickListener)</span></span><br><span class="line">    FloatingActionButton fab = findViewById(R.id.fab);</span><br><span class="line">    </span><br><span class="line">    fab.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> void onClick(View v) &#123;</span><br><span class="line">          <span class="comment">// Something</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    fab.setOnClickListener &#123; <span class="comment">/* Something */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>collection (Array, List 등) 에서 효율적으로 활용 가능</li><li>closure </li><li>할많다하… (할말이 많으므로 다음에 하겠습니다…)</li></ul></li><li><p>엘비스 연산자</p><ul><li>만약 왼쪽의 값이 비어있을 시, 오른쪽 값을 대입한다.</li><li>null 체크 및 null safety</li></ul></li></ul><p><strong>8. 문자열 템플릿</strong></p><ul><li>+ 로 string을 처리하는 방식 -&gt; $ 키워드를 활용해 “” 안에 한 번에 처리</li></ul><p><strong>9. toString 내장</strong></p><ul><li>2번의 연장선상 내용</li><li>편리한 함수를 제공한다. (equals(), hashCode(), toString(), componentN() 등)</li></ul><p><br></p><h3 id="1-2-코틀린의-주요-특성"><a href="#1-2-코틀린의-주요-특성" class="headerlink" title="1.2. 코틀린의 주요 특성"></a>1.2. 코틀린의 주요 특성</h3><h4 id="1-2-1-대상-플랫폼-서버-안드로이드-등-자바가-실행되는-모든-것"><a href="#1-2-1-대상-플랫폼-서버-안드로이드-등-자바가-실행되는-모든-것" class="headerlink" title="1.2.1 대상 플랫폼 :  서버 안드로이드 등 자바가 실행되는 모든 것"></a>1.2.1 대상 플랫폼 :  서버 안드로이드 등 자바가 실행되는 모든 것</h4><ul><li>코틀린의 주 목적 : Java보다 <strong>간결</strong>하고 <strong>생산적</strong>이며 <strong>안전한</strong> 대체 언어 제공</li><li>코틀린 활용 영역<blockquote><ul><li>서버상의 코드 (JSP/Servlet)</li><li>안드로이드</li><li>+ <a href="https://github.com/moe-java-samples" target="_blank" rel="noopener">인텔의 OS 엔진</a> : IOS</li><li>+ <a href="https://github.com/edvin/tornadofx" target="_blank" rel="noopener">토네이도FX</a> / 자바FX : 데스크톱 서비스</li><li>+ javascript 지원 (kotlin 1.1+)</li></ul></blockquote></li></ul><h4 id="1-2-2-정적-타입-지정-언어"><a href="#1-2-2-정적-타입-지정-언어" class="headerlink" title="1.2.2 정적 타입 지정 언어"></a>1.2.2 정적 타입 지정 언어</h4><ul><li>Kotlin은 정적 타입 지정 언어 (하지만 <strong>타입 추론</strong>을 지원)</li><li>class, interface, generics</li><li>null safety</li><li>함수형 타입 지원<blockquote><p><span style="font-size:24px">참고</span> (다른 글에 옮길 예정)<br><div><span style="font-size:18px">Q : <strong>정적 타입 지정</strong>이라 함은</span>  (ex&gt; Java)</div><br>-&gt; 모든 프로그램 구성 요소 타입을 <strong>컴파일 시점</strong>에 알 수 있다.<br>-&gt; 프로그램 안에서 객체의 필드나 메소드를 사용할 때마다 <strong>컴파일러가 타입을 검증</strong>한다.</p><p><strong>장점</strong> </p><ul><li>컴파일 단에서 검증하므로 메소드 호출이 더 빠름</li><li>컴파일 시점에서 오류 미리 catch</li><li>어떤 타입인지 바로 확인 가능</li><li>안전하게 리펙토링 가능 / 다른 지원 기능도 효과적으로 만들 수 있음 =&gt; 크게 체감을 못하겠음…</li></ul><p><strong>단점</strong> </p><ul><li>일일히 명시 필요</li><li>코드길이 up</li><li>데이터 구조 복잡<br><br></li></ul><hr><p><div><span style="font-size:18px">Q : <strong>동적 타입 지정</strong>이라 함은</span>  (ex&gt; Groovy, JRuby)</div><br>-&gt; 타입과 관계없이 모든 값을 변수에 넣을 수 있다.<br>-&gt; 프로그램 안에서 객체의 필드나 메소드를 사용할 때마다 <strong>실행 시점에서 타입을 검증</strong>한다.</p><p><strong>장점</strong></p><ul><li>타입 추론</li><li>코드길이 down</li><li>데이터 구조 유연</li></ul><p><strong>단점</strong> </p><ul><li>실행 시점에서 모든 것을 확인하므로 성능적 이슈 발생 가능</li><li>실행 시점 오류 발생률이 높아짐</li></ul></blockquote></li></ul><h4 id="1-2-3-함수형-프로그래밍과-객체지향-프로그래밍"><a href="#1-2-3-함수형-프로그래밍과-객체지향-프로그래밍" class="headerlink" title="1.2.3 함수형 프로그래밍과 객체지향 프로그래밍"></a>1.2.3 함수형 프로그래밍과 객체지향 프로그래밍</h4><ul><li>코틀린 = 함수형 프로그래밍 + 명령형 프로그래밍<blockquote><p><span style="font-size:24px">참고</span><br><div><span style="font-size:18px">Q : <strong>함수형 프로그래밍</strong>이라 함은</span></div><br>-&gt; 함수를 일반 값처럼 다룬다. (first-class)<br>-&gt; 만들어지고 나면 내부상태가 바뀌지 않는 <strong>불변 객체</strong>를 사용<br>-&gt; 부수 효과 없음<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(함수 외부나 다른 바깥 환경과 상호작용하지 않음)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(입력 같을 시 항상 같은 출력)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(다른 객체 상태 변경하지 않음)  </p><p><strong>장점</strong> </p><ul><li>간결함</li><li>다중 스레드를 사용해도 안전함 (&lt;- 불변 데이터 구조 사용 + 순수 함수)</li><li>테스트 용이</li></ul><hr><p><div><span style="font-size:18px">Q : <strong>명령형 프로그래밍</strong>이라 함은</span></div><br>-&gt; 프로그래밍의 상태, 상태를 변경시키는 구문의 관점에서 연산을 설명<br>-&gt; 수행하는 절차를 자세하게 설명하는 데 중점을 둠 (절차지향)</p></blockquote></li></ul><h4 id="1-2-4-무료-오픈소스"><a href="#1-2-4-무료-오픈소스" class="headerlink" title="1.2.4 무료 오픈소스"></a>1.2.4 무료 오픈소스</h4><ul><li>모두 오픈소스이며 아파치2 라이선스하에 무료 제공 (<a href="https://github.com/jetbrains/kotlin" target="_blank" rel="noopener">개발 링크</a>)</li></ul><h3 id="1-3-코틀린-응용"><a href="#1-3-코틀린-응용" class="headerlink" title="1.3. 코틀린 응용"></a>1.3. 코틀린 응용</h3><ul><li>서버 사이드, 안드로이드에서 많이 쓰임</li></ul><h4 id="1-3-1-코틀린-서버-프로그래밍"><a href="#1-3-1-코틀린-서버-프로그래밍" class="headerlink" title="1.3.1 코틀린 서버 프로그래밍"></a>1.3.1 코틀린 서버 프로그래밍</h4><ul><li>기존의 코드와 호환성이 좋으며 상호운용도 가능함 (Java)</li><li>코틀린만의 새로운 기술 제공 (Builder Pattern, DSL 기능)<blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTechnology</span></span>&#123;</span><br><span class="line">  <span class="comment">// ex&gt; HTML 생성 라이브러리</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">renderPersonList</span><span class="params">(persons: <span class="type">Collection</span>&lt;<span class="type">Person</span>&gt;)</span></span> = </span><br><span class="line">  createHTML().table&#123;</span><br><span class="line">      <span class="keyword">for</span>(person <span class="keyword">in</span> persons)&#123;</span><br><span class="line">          tr&#123;</span><br><span class="line">            td &#123; +person.name &#125;</span><br><span class="line">            td &#123; +person.age &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ex&gt; 영속성 프레임워크 (exposed 프레임워크)</span></span><br><span class="line">  <span class="keyword">object</span> CountryTable : IdTable() &#123;</span><br><span class="line">      <span class="keyword">val</span> name = varchar(<span class="string">"name"</span>, <span class="number">250</span>).uniqueIndex()</span><br><span class="line">      <span class="keyword">val</span> iso = varchar(<span class="string">"iso"</span>, <span class="number">2</span>).uniqueIndex()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Country</span></span>(id : EntityID) : Entity(id) &#123;</span><br><span class="line">      <span class="keyword">var</span> name = String <span class="keyword">by</span> CountryTable.name</span><br><span class="line">      <span class="keyword">var</span> iso = String <span class="keyword">by</span> CountryTable.iso</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> russia = Country.find &#123;</span><br><span class="line">      CountryTable.iso.eq(<span class="string">"ru"</span>)</span><br><span class="line">  &#125;.first()</span><br><span class="line"></span><br><span class="line">  println(russia.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h4 id="1-3-2-코틀린-안드로이드-프로그래밍"><a href="#1-3-2-코틀린-안드로이드-프로그래밍" class="headerlink" title="1.3.2 코틀린 안드로이드 프로그래밍"></a>1.3.2 코틀린 안드로이드 프로그래밍</h4><ul><li><p>android에 적합한 kotlin과 anko 라이브러리 활용 가능</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">verticalLayout &#123;</span><br><span class="line">    nal name = editText()</span><br><span class="line">    button(<span class="string">"say Hello"</span>)&#123;</span><br><span class="line">        onClick &#123; toast (<span class="string">"Hello, %&#123;name.text&#125;!"</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Null Safety 처리를 통한 ANR 확률 줄임</p></li><li>인라인 등을 활용한 성능상의 차이를 없앰</li></ul><h3 id="1-4-코틀린의-철학"><a href="#1-4-코틀린의-철학" class="headerlink" title="1.4. 코틀린의 철학"></a>1.4. 코틀린의 철학</h3><ul><li>코틀린은 자바와의 상호 운용성에 초점을 맞춘 실용적이고 간결하며 안전한 언어이다.</li></ul><h4 id="1-4-1-실용성"><a href="#1-4-1-실용성" class="headerlink" title="1.4.1 실용성"></a>1.4.1 실용성</h4><ul><li>개발자의 니즈를 최대한 반영한 언어</li></ul><h4 id="1-4-2-간결성"><a href="#1-4-2-간결성" class="headerlink" title="1.4.2 간결성"></a>1.4.2 간결성</h4><ul><li>작성이 번거로운 코드를 묵시적으로 제공, 람다를 통한 코드 라인 줄이기를 최대한 반영한 언어</li></ul><h4 id="1-4-3-안전성"><a href="#1-4-3-안전성" class="headerlink" title="1.4.3 안전성"></a>1.4.3 안전성</h4><ul><li>Null Safety &amp; 타입 추론 등을 통한 안전성을 추구한 언어</li></ul><h4 id="1-4-4-상호운용성"><a href="#1-4-4-상호운용성" class="headerlink" title="1.4.4 상호운용성"></a>1.4.4 상호운용성</h4><ul><li>자바의 기존 라이브러리를 계승할 수 있고, 상호운용성에 힘을 실은 언어</li></ul><h3 id="1-5-코틀린-도구-사용"><a href="#1-5-코틀린-도구-사용" class="headerlink" title="1.5. 코틀린 도구 사용"></a>1.5. 코틀린 도구 사용</h3><p>자신의 컴파일러 설정 방법을 확인하고 싶을 시 <a href="http://kotlinlang.org/docs/tutorials" target="_blank" rel="noopener">http://kotlinlang.org/docs/tutorials</a> 참고</p><h4 id="1-5-1-코틀린-코드-컴파일"><a href="#1-5-1-코틀린-코드-컴파일" class="headerlink" title="1.5.1 코틀린 코드 컴파일"></a>1.5.1 코틀린 코드 컴파일</h4><p><img src="" alt="image"></p><h4 id="1-5-2-인텔리J-아이디어와-안드로이드-스튜디오의-코틀린-플러그인"><a href="#1-5-2-인텔리J-아이디어와-안드로이드-스튜디오의-코틀린-플러그인" class="headerlink" title="1.5.2 인텔리J 아이디어와 안드로이드 스튜디오의 코틀린 플러그인"></a>1.5.2 인텔리J 아이디어와 안드로이드 스튜디오의 코틀린 플러그인</h4><ul><li>안드로이드 스튜디오, IntelliJ에서 코틀린 사용 가능<h4 id="1-5-3-대화형-셀"><a href="#1-5-3-대화형-셀" class="headerlink" title="1.5.3 대화형 셀"></a>1.5.3 대화형 셀</h4></li><li>REPL을 통해 간단한 코틀린 코드 테스트 가능 (정규식 등)<h4 id="1-5-4-이클립스-플러그인"><a href="#1-5-4-이클립스-플러그인" class="headerlink" title="1.5.4 이클립스 플러그인"></a>1.5.4 이클립스 플러그인</h4></li><li>이클립스 마켓플레이스에서 선택 가능<h4 id="1-5-5-온라인-놀이터"><a href="#1-5-5-온라인-놀이터" class="headerlink" title="1.5.5 온라인 놀이터"></a>1.5.5 온라인 놀이터</h4></li><li><a href="http://try.kotl.in/" target="_blank" rel="noopener">http://try.kotl.in/</a> 을 통한 진행 가능<h4 id="1-5-6-자바-코틀린-변환기"><a href="#1-5-6-자바-코틀린-변환기" class="headerlink" title="1.5.6 자바-코틀린 변환기"></a>1.5.6 자바-코틀린 변환기</h4></li><li>Code -&gt; Convert Java File to Kotlin File 을 통해 JAVA와의 100%(를 자랑하지만 99%) 호환 가능</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2018 Kotlin in Action </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
