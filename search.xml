<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>2018 프론트앤드 스터디 1주차</title>
      <link href="/2018/10/12/2018%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%95%A4%EB%93%9C%20%EC%8A%A4%ED%84%B0%EB%94%94%201%EC%A3%BC%EC%B0%A8/"/>
      <url>/2018/10/12/2018%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%95%A4%EB%93%9C%20%EC%8A%A4%ED%84%B0%EB%94%94%201%EC%A3%BC%EC%B0%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>웹을 정말 돌같이 생각했던 내가 프론트앤드 스터디 참여한 주 이유는 이렇다.</p><p><strong>1. 웹송합니다를 벗어나기 위한 노력</strong><br>나는 웹 프론트앤드 지식이 부족하다..<br>회사에서 맡은 주력 업무는 모바일과 백앤드 개발이지만, 회사는 웹 프론트앤드 또한 관리하고 있다.<br>그래서 웹 프론트와 관련하여 피드백을 줄 수 있어야 하기 때문에.. 웹알못 탈피가 필수가 되었다.<br>이게 프론트앤드 스터디에 참여한 첫번째 이유이다.</p><p><strong>2. javascript 복습</strong><br>비교적 간단하다. 최근 서버 개발자로 프로젝트를 진행하면서 javascript 기초의 부족함을 느껴 개념을 다시 다뤄보고 싶었다.<br>프론트앤드 스터디에 참여한 두 번째 이유!</p><p><strong>3. 동반자겸 사수</strong><br>공부는 물론 스스로 하는거지만, 익숙치 않은 분야를 다루는 만큼 방향성을 잡아주고 사수와 같은 동료들이 있으면 좋겠다고 생각했다.<br>마침 관련 스타트업에서 활동하고 있는 아는 형님의 연락이 있었고, 웹 프론트앤드 경험이 많은 친구도 (꼬셔서) 같이 하게 되었다.<br>웹 프론트앤드 경험자(이자 나를 다잡아줄 사수)와 함께하면 시너지가 확실할 것 같았다.</p><p>이런 이유와 마음가짐을 가지고 프론트앤드 스터디에 참여하게 되었다.</p><hr><h2 id="1주차"><a href="#1주차" class="headerlink" title="1주차"></a>1주차</h2><p>일시 : 2018.09.08 (토)<br>장소 : 할리스커피 신논현역점<br>시간 : 10:00 ~ 14:30  </p><p>진행 내용  </p><ul><li>초기 방향 정하기</li><li>javascript 개념 talk</li></ul><h3 id="1-javascript의-this"><a href="#1-javascript의-this" class="headerlink" title="1. javascript의 this"></a>1. javascript의 this</h3><p>java에서의 this는 클래스로부터 생성되는 독립적인 인스턴스 객체를 의미한다. (그래서 클래스 밖에서는 this사용이 불가능하다.)<br>하지만 javascript는 함수의 현재 실행 문맥이다. 실행문맥 종류만 4가지가 있다.</p><ul><li>함수 실행 : alert(‘Hello World!’)</li><li>메소드 실행 : console.log(‘Hello World!’)</li><li>생성자 실행 : new RegExp(‘\d’)</li><li>간접 실행 : alert.call(undefined, ‘Hello World!’)</li></ul><p>참고로 위 4가지는 각각의 다른 실행 문맥을 가진다. 사례를 통해 확인해보자.</p><p><br></p><h4 id="1-1-‘함수-실행’-에서의-this"><a href="#1-1-‘함수-실행’-에서의-this" class="headerlink" title="1-1. ‘함수 실행’ 에서의 this"></a>1-1. ‘함수 실행’ 에서의 this</h4><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_1_function_execute.png?raw=true" alt="텍스트"> </p><p>A : 전역 객체이다.  </p><p>이는 실행환경에 따라 전역 객체가 다른데<br>나는 node 상에서 실행시켰으므로 ‘global’ 이 this가 된다.<br>(웹 브라우저상에서는 ‘window’ 가 this가 될 것이다.)    </p><p><br></p><h4 id="1-2-‘메소드-실행’-에서의-this"><a href="#1-2-‘메소드-실행’-에서의-this" class="headerlink" title="1-2. ‘메소드 실행’ 에서의 this"></a>1-2. ‘메소드 실행’ 에서의 this</h4><p>먼저 메소드의 의미를 알아야 될 것 같다. 메소드는 객체 내부의 함수 property 를 말한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var myObject = &#123;   </span><br><span class="line">    helloFunction: <span class="function"><span class="title">function</span></span>() &#123;     // helloFunction is a method </span><br><span class="line">        <span class="built_in">return</span> <span class="string">'Hello World!'</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var message = myObject.helloFunction()</span><br></pre></td></tr></table></figure><p>이 위의 코드에서 helloFunction이 <strong>메소드</strong>라 할 수 있다.<br>속성 접근방식을 통해 호출할 수 있다.<br>그러면 메소드 내에서의 this는 무엇일까?</p><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_2_method_execute.png?raw=true" alt="텍스트"> </p><p>A : 해당 메소드를 소유하고 있는 객체이다.</p><p>그래서 this.value를 선언해도, 문제없이 obj 내부의 value를 호출해줄 수 있다. </p><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_2_method_execute_class.png?raw=true" alt="텍스트"> </p><p>class의 경우, class를 통해 만들어진 인스턴스를 this에 바인딩한다.</p><p><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_2_method_execute_caution.png?raw=true" alt="텍스트"> </p><p>단 메소드를 파라미터 형식으로 사용 시, this는 피호출 함수가 된다.<br>여기서 helper 뒤에 bind(‘any data’) 를 덧붙이면, any data 자체가 this에 바인딩된다.</p><p><br></p><h4 id="1-3-‘생성자-실행’-에서의-this"><a href="#1-3-‘생성자-실행’-에서의-this" class="headerlink" title="1-3. ‘생성자 실행’ 에서의 this"></a>1-3. ‘생성자 실행’ 에서의 this</h4><p>생성자 실행은 앞에 new 라는 키워드가 붙었을 때, 함수 객체로 계산되어 수행된다. 생성자 실행 시 this는 무슨 값을 가리키게 될까? </p><p><img width="100%" src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_3_constructor_execute.png?raw=true"></p><p>A : 새롭게 생성된 객체(인스턴스) 이다.<br>위 캡처를 참고하여 정확한 생성자 내의 로직을 설명하면 아래와 같다.</p><blockquote><ol><li>빈 객체 생성 후, this와 연결(바인딩)</li><li>생성자 내의 로직 실행</li><li>로직이 반영된 인스턴스를 반환</li></ol></blockquote><p><img width="100%" src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_3_constructor_execute_class.png?raw=true"></p><p>이는 ES6의 class 개념에서도 동일하게 활용된다!</p><p><br></p><h4 id="1-4-‘간접-실행’-에서의-this"><a href="#1-4-‘간접-실행’-에서의-this" class="headerlink" title="1-4. ‘간접 실행’ 에서의 this"></a>1-4. ‘간접 실행’ 에서의 this</h4><p>간접실행은 함수가 .call()이나 .apply(), bind() 메소드와 함께 호출될 때 수행된다.<br>지금까지의 방식이 this에 대해 별다른 언급이 없는 암묵적 this 바인딩이라고 한다면 이 방식은 this를 <strong><em>특정 객체에 명시적으로 바인딩</em></strong>하는 방식이라고 볼 수 있다.  </p><p>첫번째 파라미터에 함수 내부의 this에 바인딩될 객체 인스턴스가 들어가고<br>두번째 파라미터에 함수에 전달할 argument 정보가 들어간다</p><div><br><img src="https://github.com/ridickle7/ridickle7.github.io/blob/master/images/frontend_study/1st/1_4_indirect_execute.png?raw=true" alt="텍스트"><br></div><p>A : 이미 정답은 예정되어 있었지만 언급하면 첫번째 파라미터 (객체) 이다.<br>8, 9번째 줄을 보면 이해가 될 것이다! 첫번째 파라미터에 따라 this가 달라지는 모습을 볼 수 있다.</p><p>참조</p><ol><li><p>javascript this<br><a href="https://github.com/DongHyunKims/javascript-notes/tree/master/notes/this" target="_blank" rel="noopener">https://github.com/DongHyunKims/javascript-notes/tree/master/notes/this</a></p></li><li><p>poiemaWeb<br><a href="https://poiemaweb.com/js-this" target="_blank" rel="noopener">https://poiemaweb.com/js-this</a></p></li><li><p>javascript this 정리<br><a href="https://hyunseob.github.io/2016/03/10/javascript-this/" target="_blank" rel="noopener">https://hyunseob.github.io/2016/03/10/javascript-this/</a></p></li><li><p>자바스크립트에서 사용되는 this에 대한 설명 1<br><a href="http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-1/#tocAnchor-1-11" target="_blank" rel="noopener">http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-1/#tocAnchor-1-11</a></p></li><li><p>자바스크립트에서 사용되는 this에 대한 설명 2<br><a href="http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-2/" target="_blank" rel="noopener">http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-2/</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/12/hello-world/"/>
      <url>/2018/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
